{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nlet ThreadViewComponent = class ThreadViewComponent {\n  constructor(route, threadService) {\n    this.route = route;\n    this.threadService = threadService;\n    this.thread = {};\n    this.newCommentBody = '';\n    this.newCommentCreatedBy = '';\n    this.isEditing = false;\n    this.unsubscribe$ = new Subject();\n  }\n  // fetches the thread and the comments under the thread\n  ngOnInit() {\n    this.route.paramMap.pipe(takeUntil(this.unsubscribe$)).subscribe(params => {\n      const threadId = +params.get('id');\n      // fetches the thread by threadId\n      this.threadService.getThread(threadId).subscribe(thread => {\n        this.thread = thread;\n        // fetches the comment that belongs to the thread by threadId\n        this.threadService.getCommentsForThread(threadId).subscribe(comments => {\n          this.thread.threadComments = comments;\n        }, error => {\n          console.error('Error fetching comments', error);\n        });\n      }, error => {\n        console.error('Error fetching thread', error);\n      });\n    });\n  }\n  // makes a constructor that takes in several data. It is used in the HTML \"thread-view.component.html\" to add the data from the input\n  addComment() {\n    const newComment = {\n      commentId: 0,\n      commentBody: this.newCommentBody,\n      commentCreatedAt: new Date(),\n      commentLastEditedAt: new Date(),\n      threadId: this.thread.threadId,\n      thread: null,\n      parentCommentId: null,\n      parentComment: null,\n      createdBy: this.newCommentCreatedBy,\n      childComments: []\n    };\n    // adds the new comments to the thread it belongs to by the threadId\n    this.threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(updatedThread => {\n      this.thread = updatedThread;\n      this.newCommentBody = '';\n      this.newCommentCreatedBy = '';\n    }, error => {\n      console.error('Error adding comment', error);\n    });\n  }\n  deletePost(thread) {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${thread.threadTitle}\"`);\n    if (confirmDelete) {\n      this.threadService.deleteThread(thread.threadId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n        }\n      }, error => {\n        console.error('Error deleting item', error);\n      });\n    }\n  }\n  toggleEdit() {\n    this.isEditing = !this.isEditing;\n  }\n  saveChanges() {\n    // Perform the logic to save changes, update thread.title and thread.body\n    // Call the service method to update the thread\n    this.thread.threadTitle = this.editedTitle;\n    this.thread.threadBody = this.editedContent;\n    this.threadService.updateThread(this.thread).subscribe(response => {\n      console.log(response.message);\n      // Reset isEditing flag after successful save\n      this.isEditing = false;\n    }, error => {\n      console.error('Error saving changes', error);\n    });\n  }\n  cancelEdit() {\n    // Reset editedTitle and editedContent with the current values\n    this.editedTitle = this.thread.threadTitle;\n    this.editedContent = this.thread.threadBody;\n    // Reset isEditing flag\n    this.isEditing = false;\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n};\nThreadViewComponent = __decorate([Component({\n  selector: 'app-thread-view',\n  templateUrl: './thread-view.component.html',\n  styleUrls: ['../../css/thread_view.css']\n})], ThreadViewComponent);\nexport { ThreadViewComponent };","map":{"version":3,"mappings":"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","names":["Component","takeUntil","Subject","ThreadViewComponent","constructor","route","threadService","ngOnInit","paramMap","pipe","unsubscribe$","subscribe","params","threadId","get","getThread","thread","getCommentsForThread","comments","threadComments","error","console","addComment","newComment","commentId","commentBody","newCommentBody","commentCreatedAt","Date","commentLastEditedAt","parentCommentId","parentComment","createdBy","newCommentCreatedBy","childComments","addCommentToThread","updatedThread","deletePost","confirmDelete","confirm","threadTitle","deleteThread","response","success","log","message","toggleEdit","isEditing","saveChanges","editedTitle","threadBody","editedContent","updateThread","cancelEdit","ngOnDestroy","next","complete","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ThreadService } from './threads.service';\r\nimport { Thread } from './threads';\r\nimport { Comment } from '../comments/comments';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-thread-view',\r\n  templateUrl: './thread-view.component.html',\r\n  styleUrls: ['../../css/thread_view.css']\r\n})\r\nexport class ThreadViewComponent implements OnInit, OnDestroy {\r\n  thread: Thread = {} as Thread;\r\n  newCommentBody: string = '';\r\n  newCommentCreatedBy: string = '';\r\n  isEditing = false;\r\n  editedTitle!: string;\r\n  editedContent!: string;\r\n\r\n  private unsubscribe$ = new Subject<void>();\r\n\r\n  constructor(private route: ActivatedRoute, private threadService: ThreadService) {}\r\n  // fetches the thread and the comments under the thread\r\n  ngOnInit(): void {\r\n    this.route.paramMap.pipe(\r\n      takeUntil(this.unsubscribe$)\r\n    ).subscribe(params => {\r\n      const threadId = +params.get('id')!;\r\n      // fetches the thread by threadId\r\n      this.threadService.getThread(threadId).subscribe(\r\n        (thread: Thread) => {\r\n          this.thread = thread;\r\n          // fetches the comment that belongs to the thread by threadId\r\n          this.threadService.getCommentsForThread(threadId).subscribe(\r\n            (comments: Comment[]) => {\r\n              this.thread.threadComments = comments;\r\n            },\r\n            (error) => {\r\n              console.error('Error fetching comments', error);\r\n            }\r\n          );\r\n        },\r\n        (error) => {\r\n          console.error('Error fetching thread', error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n  // makes a constructor that takes in several data. It is used in the HTML \"thread-view.component.html\" to add the data from the input\r\n  addComment() {\r\n    const newComment = {\r\n      commentId: 0,\r\n      commentBody: this.newCommentBody,\r\n      commentCreatedAt: new Date(),\r\n      commentLastEditedAt:new Date(),\r\n      threadId: this.thread.threadId,\r\n      thread: null,\r\n      parentCommentId: null,\r\n      parentComment: null,\r\n      createdBy: this.newCommentCreatedBy,\r\n      childComments: [],\r\n    };\r\n  // adds the new comments to the thread it belongs to by the threadId\r\n    this.threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(\r\n      (updatedThread: Thread) => {\r\n        this.thread = updatedThread;\r\n        this.newCommentBody = '';\r\n        this.newCommentCreatedBy = '';\r\n      },\r\n      (error) => {\r\n        console.error('Error adding comment', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deletePost(thread: Thread){\r\n    const confirmDelete = confirm(`Are you sure you want to delete \"${thread.threadTitle}\"`);\r\n    if (confirmDelete){\r\n      this.threadService.deleteThread(thread.threadId).subscribe(\r\n        (response) => {\r\n          if (response.success){\r\n            console.log(response.message);\r\n          }\r\n        },\r\n        error => {\r\n          console.error('Error deleting item', error)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  toggleEdit() {\r\n    this.isEditing = !this.isEditing;\r\n  }\r\n\r\n  saveChanges(): void {\r\n    // Perform the logic to save changes, update thread.title and thread.body\r\n    // Call the service method to update the thread\r\n    this.thread.threadTitle = this.editedTitle;\r\n    this.thread.threadBody = this.editedContent;\r\n\r\n    this.threadService.updateThread(this.thread).subscribe(\r\n      (response) => {\r\n        console.log(response.message);\r\n        // Reset isEditing flag after successful save\r\n        this.isEditing = false;\r\n      },\r\n      (error) => {\r\n        console.error('Error saving changes', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  cancelEdit(): void {\r\n    // Reset editedTitle and editedContent with the current values\r\n    this.editedTitle = this.thread.threadTitle;\r\n    this.editedContent = this.thread.threadBody;\r\n    // Reset isEditing flag\r\n    this.isEditing = false;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
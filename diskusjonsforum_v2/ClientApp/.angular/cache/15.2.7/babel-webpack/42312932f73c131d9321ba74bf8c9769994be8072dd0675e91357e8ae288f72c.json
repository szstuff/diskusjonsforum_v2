{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./threads.service\";\nimport * as i4 from \"@angular/common/http\";\nexport class ThreadformComponent {\n  constructor(_formBuilder,\n  // the form for creating threads\n  _router,\n  //lets us nagivate to different routers within the angular application\n  _threadService,\n  //encapsulate functionality linked to ThreadService\n  _http) {\n    this._formBuilder = _formBuilder;\n    this._router = _router;\n    this._threadService = _threadService;\n    this._http = _http;\n    this.threadForm = _formBuilder.group({\n      // uses _formBuilder to create threadForm a formgroup\n      title: ['', Validators.required],\n      body: ['', Validators.required] // ensures the input of the body is not empty\n    });\n  }\n\n  onSubmit() {\n    console.log(\"ThreadCreate from submitted:\"); // Logs when the thread has been submitted\n    console.log(this.threadForm); // logs the object \"threadForm\"\n    console.log('The thread ' + this.threadForm.value.title + ' is created.'); // logs a message telling the thread has been created\n    console.log(this.threadForm.touched); //Logs if the threadForm control has been touched or not\n    const newThread = this.threadForm.value; //Gets the current values of the threadForm control\n    const createUrl = \"api/thread/create\"; //navigates to the URL for creating new thread\n    this._threadService.createThread(newThread) //makes http post request with the data from newThread\n    .subscribe(response => {\n      if (response.success) {\n        // if the response is a sucsess a message is logged from the server\n        console.log(response.message);\n        this._router.navigate(['/threads']); // navigates back to /threads\n      } else {\n        // if it's not succesfull a failed success message is logged\n        console.log('Thread creation failed');\n      }\n    });\n  }\n  backToThreads() {\n    this._router.navigate(['/threads']); //navigates back to the threads\n  }\n}\n\nThreadformComponent.ɵfac = function ThreadformComponent_Factory(t) {\n  return new (t || ThreadformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ThreadService), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\nThreadformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadformComponent,\n  selectors: [[\"app-threads-threadform\"]],\n  decls: 15,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\"], [\"type\", \"text\", \"id\", \"title\", \"formControlName\", \"title\", 1, \"form-control\"], [\"for\", \"body\"], [\"type\", \"text\", \"id\", \"body\", \"formControlName\", \"body\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function ThreadformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Create Thread\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ThreadformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Body:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵtext(12, \"Create Thread\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function ThreadformComponent_Template_button_click_13_listener() {\n        return ctx.backToThreads();\n      });\n      i0.ɵɵtext(14, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.threadForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"disabled\", ctx.threadForm.invalid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;;AAWrG,OAAM,MAAOC,mBAAmB;EAG9BC,YACUC,YAAyB;EAAE;EAC3BC,OAAe;EAAE;EACjBC,cAA6B;EAAE;EAC/BC,KAAiB;IAHjB,iBAAY,GAAZH,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,mBAAc,GAAdC,cAAc;IACd,UAAK,GAALC,KAAK;IAEb,IAAI,CAACC,UAAU,GAAGJ,YAAY,CAACK,KAAK,CAAC;MACnC;MACAC,KAAK,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAChCC,IAAI,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC,CAAC;KACjC,CAAC;EACJ;;EAGAE,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,UAAU,CAAC,CAAC,CAAC;IAC9BM,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACP,UAAU,CAACQ,KAAK,CAACN,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC;IAC3EI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,UAAU,CAACS,OAAO,CAAC,CAAC,CAAC;IACtC,MAAMC,SAAS,GAAG,IAAI,CAACV,UAAU,CAACQ,KAAK,CAAC,CAAC;IACzC,MAAMG,SAAS,GAAG,mBAAmB,CAAC,CAAC;IACvC,IAAI,CAACb,cAAc,CAACc,YAAY,CAACF,SAAS,CAAC,CAAC;IAAA,CACzCG,SAAS,CAACC,QAAQ,IAAG;MACtB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpB;QACAT,OAAO,CAACC,GAAG,CAACO,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAACnB,OAAO,CAACoB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAE;OACvC,MACI;QAAE;QACLX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;IAEzC,CAAC,CAAC;EACJ;EAEAW,aAAa;IACX,IAAI,CAACrB,OAAO,CAACoB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvC;;;AAvCWvB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZhCC,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MAEtBA,+BAAuD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACpDD,8BAAwB;MACHA,sBAAM;MAAAA,iBAAQ;MACjCA,2BAA6E;MAC/EA,iBAAM;MACNA,8BAAwB;MACJA,qBAAK;MAAAA,iBAAQ;MAC/BA,4BAA2E;MAC7EA,iBAAM;MACNA,kCAA8E;MAAAA,8BAAa;MAAAA,iBAAS;MACpGA,kCAA4D;MAA1BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAVvEA,eAAwB;MAAxBA,0CAAwB;MASkBA,eAA+B;MAA/BA,iDAA+B","names":["Validators","ThreadformComponent","constructor","_formBuilder","_router","_threadService","_http","threadForm","group","title","required","body","onSubmit","console","log","value","touched","newThread","createUrl","createThread","subscribe","response","success","message","navigate","backToThreads","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threadform.component.ts","C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threadform.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ThreadService } from './threads.service';\r\n\r\n@Component({\r\n  selector: 'app-threads-threadform',\r\n  templateUrl: './threadform.component.html',\r\n  //styleUrls: ['./thread-form.component.css'],\r\n})\r\n\r\nexport class ThreadformComponent {\r\n  threadForm: FormGroup; // provides the object FormGRoup as threadForm\r\n\r\n  constructor(\r\n    private _formBuilder: FormBuilder, // the form for creating threads\r\n    private _router: Router, //lets us nagivate to different routers within the angular application\r\n    private _threadService: ThreadService, //encapsulate functionality linked to ThreadService\r\n    private _http: HttpClient) // sends HTTP requests and receives HTTP responses\r\n  {\r\n    this.threadForm = _formBuilder.group({\r\n      // uses _formBuilder to create threadForm a formgroup\r\n      title: ['', Validators.required], // Validators.required ensures the input title is not empty\r\n      body: ['', Validators.required] // ensures the input of the body is not empty\r\n    });\r\n  }\r\n\r\n\r\n  onSubmit() { // the method gets triggered when a thread is submitted\r\n    console.log(\"ThreadCreate from submitted:\"); // Logs when the thread has been submitted\r\n    console.log(this.threadForm); // logs the object \"threadForm\"\r\n    console.log('The thread ' + this.threadForm.value.title + ' is created.'); // logs a message telling the thread has been created\r\n    console.log(this.threadForm.touched); //Logs if the threadForm control has been touched or not\r\n    const newThread = this.threadForm.value; //Gets the current values of the threadForm control\r\n    const createUrl = \"api/thread/create\"; //navigates to the URL for creating new thread\r\n    this._threadService.createThread(newThread) //makes http post request with the data from newThread\r\n      .subscribe(response => {\r\n      if (response.success) {\r\n        // if the response is a sucsess a message is logged from the server\r\n        console.log(response.message);\r\n        this._router.navigate(['/threads']);  // navigates back to /threads\r\n      }\r\n      else { // if it's not succesfull a failed success message is logged\r\n        console.log('Thread creation failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  backToThreads() {\r\n    this._router.navigate(['/threads']); //navigates back to the threads\r\n  }\r\n}\r\n","<h2>Create Thread</h2>\r\n\r\n<form [formGroup]=\"threadForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"title\">Title:</label>\r\n    <input type=\"text\" id=\"title\" formControlName=\"title\" class=\"form-control\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"body\">Body:</label>\r\n    <input type=\"text\" id=\"body\" formControlName=\"body\" class=\"form-control\" />\r\n  </div>\r\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"threadForm.invalid\">Create Thread</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToThreads()\">Cancel</button>\r\n\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
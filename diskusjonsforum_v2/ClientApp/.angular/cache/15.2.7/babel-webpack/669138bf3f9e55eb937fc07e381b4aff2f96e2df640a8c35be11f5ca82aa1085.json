{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ThreadService {\n  constructor(_http) {\n    this._http = _http;\n    this.apiUrl = 'api/threads';\n  }\n  getThreads() {\n    return this._http.get(`${this.apiUrl}/getall`);\n  }\n  createThread(newThread) {\n    const createUrl = 'api/thread/create';\n    return this._http.post(createUrl, newThread);\n  }\n  updateThread(thread) {\n    const url = 'api/thread/update/${thread.id}';\n    return this._http.put(url, thread);\n  }\n  deleteThread(threadId) {\n    const url = `api/thread/delete/${threadId}`;\n    return this._http.delete(url);\n  }\n  searchThreads(searchQuery) {\n    const url = `api/thread/search?searchQuery=${searchQuery}`;\n    return this._http.get(url);\n  }\n}\nThreadService.ɵfac = function ThreadService_Factory(t) {\n  return new (t || ThreadService)(i0.ɵɵinject(i1.HttpClient));\n};\nThreadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThreadService,\n  factory: ThreadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,aAAa;EAExBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IADjB,WAAM,GAAG,aAAa;EACU;EAExCC,UAAU;IACR,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAW,GAAG,IAAI,CAACC,MAAM,SAAS,CAAC;EAC1D;EAEAC,YAAY,CAACC,SAAiB;IAC5B,MAAMC,SAAS,GAAG,mBAAmB;IACrC,OAAO,IAAI,CAACN,KAAK,CAACO,IAAI,CAAMD,SAAS,EAAED,SAAS,CAAC;EACnD;EAEAG,YAAY,CAACC,MAAc;IACzB,MAAMC,GAAG,GAAE,gCAAgC;IAC3C,OAAO,IAAI,CAACV,KAAK,CAACW,GAAG,CAACD,GAAG,EAAED,MAAM,CAAC;EACpC;EAEAG,YAAY,CAACC,QAAgB;IAC3B,MAAMH,GAAG,GAAG,qBAAqBG,QAAQ,EAAE;IAC3C,OAAO,IAAI,CAACb,KAAK,CAACc,MAAM,CAACJ,GAAG,CAAC;EAC/B;EAEAK,aAAa,CAACC,WAAmB;IAC/B,MAAMN,GAAG,GAAG,iCAAiCM,WAAW,EAAE;IAC1D,OAAO,IAAI,CAAChB,KAAK,CAACE,GAAG,CAACQ,GAAG,CAAC;EAC5B;;AA1BWZ,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAmB,SAAbnB,aAAa;EAAAoB,YAHZ;AAAM","names":["ThreadService","constructor","_http","getThreads","get","apiUrl","createThread","newThread","createUrl","post","updateThread","thread","url","put","deleteThread","threadId","delete","searchThreads","searchQuery","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Thread } from \"./threads\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\nexport class ThreadService {\r\n  private apiUrl = 'api/threads';\r\n  constructor(private _http: HttpClient) {}\r\n\r\n  getThreads(): Observable<Thread[]> {\r\n    return this._http.get<Thread[]>(`${this.apiUrl}/getall`);\r\n  }\r\n\r\n  createThread(newThread: Thread): Observable<any> {\r\n    const createUrl = 'api/thread/create';\r\n    return this._http.post<any>(createUrl, newThread);\r\n  }\r\n\r\n  updateThread(thread: Thread): Observable<any>{\r\n    const url ='api/thread/update/${thread.id}';\r\n    return this._http.put(url, thread);\r\n  }\r\n\r\n  deleteThread(threadId: number): Observable<any>{\r\n    const url = `api/thread/delete/${threadId}`;\r\n    return this._http.delete(url);\r\n  }\r\n\r\n  searchThreads(searchQuery: string): Observable<any> {\r\n    const url = `api/thread/search?searchQuery=${searchQuery}`;\r\n    return this._http.get(url);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
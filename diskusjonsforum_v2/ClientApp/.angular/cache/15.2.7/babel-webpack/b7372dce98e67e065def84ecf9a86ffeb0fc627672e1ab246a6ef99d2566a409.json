{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ThreadService {\n  constructor(_http) {\n    this._http = _http;\n    this.apiUrl = 'api/threads';\n    this.apiCommentUrl = 'api/comments';\n  }\n  getThreadsByRecent() {\n    const url = `${this.apiUrl}/getByRecent`;\n    return this._http.get(url);\n  }\n  getThreadsByComments() {\n    const url = `${this.apiUrl}/getByComments`;\n    return this._http.get(url);\n  }\n  // Updated filtering logic in the service\n  filterBy(option) {\n    if (option === 'recent') {\n      return this.getThreadsByRecent();\n    } else if (option === 'comments') {\n      return this.getThreadsByComments();\n    } else {\n      // Handle other filtering options or default behavior\n      return this.getThreads(); // Default to fetching all threads\n    }\n  }\n  // Gets all the threads with GET request\n  getThreads() {\n    return this._http.get(`${this.apiUrl}/getall`);\n  }\n  getThread(threadId) {\n    const url = `${this.apiUrl}/getThread/${threadId}`;\n    return this._http.get(url);\n  }\n  // New method to get comments for a thread\n  getCommentsForThread(threadId) {\n    const url = `${this.apiCommentUrl}/getByThread/${threadId}`;\n    return this._http.get(url);\n  }\n  addCommentToThread(threadId, newComment) {\n    const url = `${this.apiCommentUrl}/addComment/${threadId}`;\n    return this._http.post(url, newComment);\n  }\n  createThread(newThread) {\n    const createUrl = `${this.apiUrl}/create`;\n    return this._http.post(createUrl, newThread);\n  }\n  // updates the thread by threadId with PUT request\n  updateThread(thread) {\n    const url = `${this.apiUrl}/update/${thread.threadId}`;\n    return this._http.put(url, thread);\n  }\n  // deletes a thread by threadId with DELETE request\n  deleteThread(threadId) {\n    const url = `${this.apiUrl}/delete/${threadId}`;\n    return this._http.delete(url);\n  }\n  // searches after a thread based on query with GET request\n  searchThreads(searchQuery) {\n    const url = `${this.apiUrl}/search?searchQuery=${searchQuery}`;\n    return this._http.get(url);\n  }\n  updateComment(comment) {\n    const url = `${this.apiCommentUrl}/update/${comment.commentId}`;\n    return this._http.put(url, comment);\n  }\n  deleteComment(commentId) {\n    const url = `${this.apiCommentUrl}/delete/${commentId}`;\n    return this._http.delete(url);\n  }\n}\nThreadService.ɵfac = function ThreadService_Factory(t) {\n  return new (t || ThreadService)(i0.ɵɵinject(i1.HttpClient));\n};\nThreadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThreadService,\n  factory: ThreadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["ThreadService","constructor","_http","getThreadsByRecent","url","apiUrl","get","getThreadsByComments","filterBy","option","getThreads","getThread","threadId","getCommentsForThread","apiCommentUrl","addCommentToThread","newComment","post","createThread","newThread","createUrl","updateThread","thread","put","deleteThread","delete","searchThreads","searchQuery","updateComment","comment","commentId","deleteComment","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Thread } from \"./threads\";\r\nimport { Comment } from '../comments/comments'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\nexport class ThreadService {\r\n  private apiUrl = 'api/threads';\r\n  private apiCommentUrl = 'api/comments';\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  getThreadsByRecent(): Observable<Thread[]> {\r\n    const url = `${this.apiUrl}/getByRecent`;\r\n    return this._http.get<Thread[]>(url);\r\n  }\r\n\r\n  getThreadsByComments(): Observable<Thread[]> {\r\n    const url = `${this.apiUrl}/getByComments`;\r\n    return this._http.get<Thread[]>(url);\r\n  }\r\n\r\n  // Updated filtering logic in the service\r\n  filterBy(option: string): Observable<Thread[]> {\r\n    if (option === 'recent') {\r\n      return this.getThreadsByRecent();\r\n    } else if (option === 'comments') {\r\n      return this.getThreadsByComments();\r\n    } else {\r\n      // Handle other filtering options or default behavior\r\n      return this.getThreads(); // Default to fetching all threads\r\n    }\r\n  }\r\n\r\n  // Gets all the threads with GET request\r\n  getThreads(): Observable<Thread[]> {\r\n    return this._http.get<Thread[]>(`${this.apiUrl}/getall`);\r\n  }\r\n\r\n  getThread(threadId: number): Observable<Thread> {\r\n    const url = `${this.apiUrl}/getThread/${threadId}`;\r\n    return this._http.get<Thread>(url);\r\n  }\r\n\r\n  // New method to get comments for a thread\r\n  getCommentsForThread(threadId: number): Observable<Comment[]> {\r\n    const url = `${this.apiCommentUrl}/getByThread/${threadId}`;\r\n    return this._http.get<Comment[]>(url);\r\n  }\r\n  addCommentToThread(threadId: number, newComment: Comment): Observable<Thread> {\r\n    const url = `${this.apiCommentUrl}/addComment/${threadId}`;\r\n    return this._http.post<Thread>(url, newComment);\r\n  }\r\n\r\n  createThread(newThread: Thread): Observable<any> {\r\n    const createUrl = `${this.apiUrl}/create`;\r\n    return this._http.post<any>(createUrl, newThread);\r\n  }\r\n\r\n  // updates the thread by threadId with PUT request\r\n  updateThread(thread: Thread): Observable<any>{\r\n    const url = `${this.apiUrl}/update/${thread.threadId}`;\r\n    return this._http.put(url, thread);\r\n  }\r\n  // deletes a thread by threadId with DELETE request\r\n  deleteThread(threadId: number): Observable<any>{\r\n    const url = `${this.apiUrl}/delete/${threadId}`;\r\n    return this._http.delete(url);\r\n  }\r\n  // searches after a thread based on query with GET request\r\n  searchThreads(searchQuery: string): Observable<any> {\r\n    const url = `${this.apiUrl}/search?searchQuery=${searchQuery}`;\r\n    return this._http.get(url);\r\n  }\r\n\r\n  updateComment(comment: Comment){\r\n    const url = `${this.apiCommentUrl}/update/${comment.commentId}`;\r\n    return this._http.put(url, comment);\r\n  }\r\n  deleteComment(commentId: number): Observable<any> {\r\n    const url = `${this.apiCommentUrl}/delete/${commentId}`;\r\n    return this._http.delete<any>(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
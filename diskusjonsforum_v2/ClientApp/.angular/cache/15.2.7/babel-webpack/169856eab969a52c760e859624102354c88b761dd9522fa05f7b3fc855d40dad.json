{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./threads.service\";\nimport * as i3 from \"@angular/common\";\nfunction ThreadViewComponent_div_0_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last edited: \", i0.ɵɵpipeBind2(3, 1, ctx_r3.thread.threadLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nfunction ThreadViewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"h1\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 5)(5, \"p\");\n    i0.ɵɵtext(6, \" Posted by \");\n    i0.ɵɵelementStart(7, \"b\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵtext(10, \" On the \");\n    i0.ɵɵelementStart(11, \"b\");\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \". \");\n    i0.ɵɵtemplate(15, ThreadViewComponent_div_0_span_15_Template, 4, 4, \"span\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"hr\");\n    i0.ɵɵelementStart(17, \"p\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.thread.threadTitle);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r0.thread.createdBy);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(13, 5, ctx_r0.thread.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.thread.threadCreatedAt !== ctx_r0.thread.threadLastEditedAt);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.thread.threadBody);\n  }\n}\nfunction ThreadViewComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"p\");\n    i0.ɵɵtext(2, \"The requested thread was not found.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const comment_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r5.commentBody);\n  }\n}\nfunction ThreadViewComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Comments\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ThreadViewComponent_div_2_div_3_Template, 3, 1, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.thread.threadComments);\n  }\n}\nexport class ThreadViewComponent {\n  // provides ActivatedRoute and ThreadService as route and threadservice\n  constructor(route, threadService) {\n    this.route = route;\n    this.threadService = threadService;\n    this.thread = {}; //initialise thread object\n  }\n\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      // @ts-ignore, thread ID will not be null\n      const threadId = +params.get('id');\n      // gets details on the corresponding thread by using \"this.threadService\" and\n      // updates the property in the component of \"thread\" with this.thread\n      this.threadService.getThread(threadId).subscribe(thread => {\n        this.thread = thread;\n      });\n    });\n  }\n}\nThreadViewComponent.ɵfac = function ThreadViewComponent_Factory(t) {\n  return new (t || ThreadViewComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ThreadService));\n};\nThreadViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadViewComponent,\n  selectors: [[\"app-thread-view\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"container mt-5\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"container\", \"mt-5\"], [\"id\", \"displayPost\"], [1, \"thread-title-current\"], [1, \"thread-information\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function ThreadViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ThreadViewComponent_div_0_Template, 19, 8, \"div\", 0);\n      i0.ɵɵtemplate(1, ThreadViewComponent_div_1_Template, 3, 0, \"div\", 0);\n      i0.ɵɵtemplate(2, ThreadViewComponent_div_2_Template, 4, 1, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.thread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.thread);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i3.DatePipe],\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"mappings":";;;;;;IAUQA,4BAAmE;IAC9DA,YAAuE;;IAAAA,iBAAI;;;;IAA3EA,eAAuE;IAAvEA,sHAAuE;;;;;IAXpFA,8BAA2C;IAGNA,YAAwB;IAAAA,iBAAK;IAE9DA,8BAAgC;IAG5BA,2BAAU;IAAAA,yBAAG;IAAAA,YAAsB;IAAAA,iBAAI;IAACA,qBAAK;IAACA,yBAAO;IAAAA,0BAAG;IAAAA,aAAuD;;IAAAA,iBAAI;IAAAA,mBACnH;IACAA,8EAEO;IACTA,iBAAI;IACJA,sBAAM;IACNA,0BAAG;IAAAA,aAAuB;IAAAA,iBAAI;;;;IAZCA,eAAwB;IAAxBA,+CAAwB;IAKxCA,eAAsB;IAAtBA,6CAAsB;IAAqBA,eAAuD;IAAvDA,8FAAuD;IAExGA,eAA0D;IAA1DA,yFAA0D;IAKhEA,eAAuB;IAAvBA,8CAAuB;;;;;IAKhCA,8BAA4C;IACvCA,mDAAmC;IAAAA,iBAAI;;;;;IAM1CA,2BAAmD;IAC9CA,YAAyB;IAAAA,iBAAI;;;;IAA7BA,eAAyB;IAAzBA,4CAAyB;;;;;IAHhCA,2BAAoB;IACdA,wBAAQ;IAAAA,iBAAK;IACjBA,0EAEM;IACRA,iBAAM;;;;IAHqBA,eAAwB;IAAxBA,sDAAwB;;;AChBnD,OAAM,MAAOC,mBAAmB;EAG9B;EACAC,YAAoBC,KAAqB,EAAUC,aAA4B;IAA3D,UAAK,GAALD,KAAK;IAA0B,kBAAa,GAAbC,aAAa;IAHhE,WAAM,GAAW,EAAY,CAAC,CAAC;EAGoD;;EAEnFC,QAAQ;IACN,IAAI,CAACF,KAAK,CAACG,QAAQ,CAACC,SAAS,CAACC,MAAM,IAAG;MACrC;MACA,MAAMC,QAAQ,GAAG,CAACD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MAClC;MACA;MACA,IAAI,CAACN,aAAa,CAACO,SAAS,CAACF,QAAQ,CAAC,CAACF,SAAS,CAACK,MAAM,IAAG;QACxD,IAAI,CAACA,MAAM,GAAGA,MAAM;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAhBWX,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAY;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDXhCjB,qEAkBM;MAENA,oEAEM;MAGNA,oEAKM;;;MA9BuBA,iCAAY;MAoBZA,eAAa;MAAbA,kCAAa;MAKpCA,eAAY;MAAZA,iCAAY","names":["i0","ThreadViewComponent","constructor","route","threadService","ngOnInit","paramMap","subscribe","params","threadId","get","getThread","thread","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.html","C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.ts"],"sourcesContent":["<div class=\"container mt-5\" *ngIf=\"thread\">\r\n  <div id=\"displayPost\">\r\n    <!-- Thread title -->\r\n    <h1 class=\"thread-title-current\">{{ thread.threadTitle }}</h1>\r\n\r\n    <div class=\"thread-information\">\r\n      <!-- Thread information: user, post date, last edited date -->\r\n      <p>\r\n        Posted by <b>{{ thread.createdBy }}</b> <br/> On the <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>.\r\n        <!-- Display last edited date if different -->\r\n        <span *ngIf=\"thread.threadCreatedAt !== thread.threadLastEditedAt\">\r\n          <i>Last edited: {{ thread.threadLastEditedAt | date: 'yyyy-MM-dd HH:mm' }}</i>\r\n        </span>\r\n      </p>\r\n      <hr />\r\n      <p>{{ thread.threadBody }}</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"container mt-5\" *ngIf=\"!thread\">\r\n  <p>The requested thread was not found.</p>\r\n</div>\r\n\r\n\r\n<div *ngIf=\"thread\">\r\n  <h3>Comments</h3>\r\n  <div *ngFor=\"let comment of thread.threadComments\">\r\n    <p>{{ comment.commentBody }}</p>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ThreadsComponent } from './threads.component';\r\nimport { ThreadService } from './threads.service';\r\nimport {Thread} from \"./threads\";\r\n\r\n@Component({\r\n  selector: 'app-thread-view', // custom HTML tag\r\n  templateUrl: './thread-view.component.html', // path to the template\r\n  styleUrls: ['./thread-view.component.css']\r\n})\r\nexport class ThreadViewComponent implements OnInit {\r\n  thread: Thread = {} as Thread; //initialise thread object\r\n\r\n  // provides ActivatedRoute and ThreadService as route and threadservice\r\n  constructor(private route: ActivatedRoute, private threadService: ThreadService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe(params => {\r\n      // @ts-ignore, thread ID will not be null\r\n      const threadId = +params.get('id');\r\n      // gets details on the corresponding thread by using \"this.threadService\" and\r\n      // updates the property in the component of \"thread\" with this.thread\r\n      this.threadService.getThread(threadId).subscribe(thread => {\r\n        this.thread = thread;\r\n      });\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
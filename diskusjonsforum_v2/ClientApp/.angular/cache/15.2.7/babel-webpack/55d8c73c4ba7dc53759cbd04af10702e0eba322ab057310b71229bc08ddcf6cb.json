{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { Directive, HostListener } from '@angular/core';\nlet ThreadViewComponent = class ThreadViewComponent {\n  constructor(el, renderer, _formBuilder, _router,\n  // Initialise router object for navigation\n  route, _threadService, _http) {\n    this.el = el;\n    this.renderer = renderer;\n    this._formBuilder = _formBuilder;\n    this._router = _router;\n    this.route = route;\n    this._threadService = _threadService;\n    this._http = _http;\n    this.thread = {};\n    this.newCommentBody = '';\n    this.newCommentCreatedBy = '';\n    this.isEditing = false;\n    this.editedTitle = '';\n    this.editedBody = '';\n    this.unsubscribe$ = new Subject();\n    this.threadForm = _formBuilder.group({\n      // Define FormBuilder input validation rules\n      createdBy: ['', Validators.required],\n      threadTitle: ['', [Validators.required, Validators.maxLength(100)]],\n      threadBody: ['', [Validators.required, Validators.maxLength(2500)]]\n    });\n    this.commentForm = _formBuilder.group({\n      newCommentCreatedBy: ['', Validators.required],\n      newCommentBody: ['', Validators.required]\n    });\n  }\n  onInput(textArea) {\n    this.adjustHeight(textArea);\n  }\n  ngAfterViewInit() {\n    // Adjust the height initially (if there is pre-existing text)\n    this.adjustHeight(this.el.nativeElement);\n  }\n  adjustHeight(textArea) {\n    textArea.style.overflow = 'hidden';\n    textArea.style.height = 'auto';\n    textArea.style.height = textArea.scrollHeight + 'px';\n  }\n  // fetches the thread and the comments under the thread\n  ngOnInit() {\n    this.route.paramMap.pipe(takeUntil(this.unsubscribe$)).subscribe(params => {\n      const threadId = +params.get('id');\n      // fetches the thread by threadId\n      this._threadService.getThread(threadId).subscribe(thread => {\n        this.thread = thread;\n        // fetches the comment that belongs to the thread by threadId\n        this._threadService.getCommentsForThread(threadId).subscribe(comments => {\n          this.thread.threadComments = comments;\n        }, error => {\n          console.error('Error fetching comments', error);\n        });\n      }, error => {\n        console.error('Error fetching thread', error);\n      });\n    });\n  }\n  // makes a constructor that takes in several data for comment. It is used in the HTML \"thread-view.component.html\" to add the data from the input\n  addComment() {\n    const newComment = {\n      commentId: 0,\n      commentBody: this.newCommentBody,\n      commentCreatedAt: new Date(),\n      commentLastEditedAt: new Date(),\n      threadId: this.thread.threadId,\n      thread: null,\n      parentCommentId: null,\n      parentComment: null,\n      createdBy: this.newCommentCreatedBy,\n      childComments: []\n    };\n    this._threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(response => {\n      this.newCommentBody = '';\n      this.newCommentCreatedBy = '';\n      newComment.commentId = response.commentId;\n      this.thread.threadComments.push(newComment); //Adds new comment to local representation of thread (because the thread is already loaded and would otherwise need to be refreshed)\n    }, error => {\n      console.error('Error adding comment', error);\n    });\n  }\n  // deletes the thread by threadId\n  deletePost(thread) {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${thread.threadTitle}\"`);\n    if (confirmDelete) {\n      this._threadService.deleteThread(thread.threadId).subscribe(response => {\n        if (response.success) {\n          this._router.navigate(['/']); //Navigate to home page after deleting a thread.\n          console.log(response.message);\n        }\n      }, error => {\n        console.error('Error deleting item', error);\n      });\n    }\n  }\n  toggleEdit(thread) {\n    this.isEditing = !this.isEditing;\n    this.editedBody = thread.threadBody;\n    this.editedTitle = thread.threadTitle;\n  }\n  // saves the changes made on the thread.\n  saveChanges() {\n    this.thread.threadTitle = this.editedTitle;\n    this.thread.threadBody = this.editedBody;\n    this._threadService.updateThread(this.thread).subscribe(response => {\n      console.log('Server response:', response);\n      // Update the thread with the response from the server\n      if (response.success) {\n        this.thread = response.updatedThread;\n        this.toggleEdit(this.thread);\n      } else {\n        console.error('Error updating thread. Server response:', response);\n      }\n    }, error => {\n      console.error('Error saving changes', error);\n    });\n  }\n  deleteComment(commentId) {\n    this._threadService.deleteComment(commentId).subscribe(() => {\n      console.log('Comment deleted');\n      // This ensure that the UI update gets updated after deletion\n      if (this.thread && this.thread.threadComments) {\n        this.thread.threadComments = this.thread.threadComments.filter(comment => comment.commentId !== commentId);\n      }\n    }, error => console.error('Error deleting comment', error));\n  }\n  toggleEditComment(comment) {\n    comment.isEditing = !comment.isEditing;\n    this.editedBody = comment.commentBody;\n  }\n  saveChangesComment(comment, editedBody) {\n    if (editedBody !== undefined && editedBody.length >= 1) {\n      comment.commentBody = editedBody;\n      this._threadService.updateComment(comment).subscribe(response => {\n        console.log(\"Comment has been updated\");\n        this.toggleEditComment(comment);\n      }, error => {\n        console.error('Error saving changes', error);\n      });\n    } else {\n      console.error('Attempted to save changes with undefined editedBody');\n    }\n  }\n  // LastEditedAt value is only displayed when time difference is over 1s (60*1000ms)\n  significantTimeDifference(object) {\n    let timeDiff;\n    if (\"threadCreatedAt\" in object) {\n      //If object contains threadCreatedAt field, it must be a thread.\n      timeDiff = new Date(object.threadLastEditedAt).getTime() - new Date(object.threadCreatedAt).getTime();\n    } else {\n      timeDiff = new Date(object.commentLastEditedAt).getTime() - new Date(object.commentCreatedAt).getTime();\n    }\n    return timeDiff > 60 * 1000;\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n};\n__decorate([HostListener('input', ['$event.target'])], ThreadViewComponent.prototype, \"onInput\", null);\nThreadViewComponent = __decorate([Component({\n  selector: 'app-thread-view',\n  templateUrl: './thread-view.component.html',\n  styleUrls: ['../../css/thread_view.css']\n}), Directive({\n  selector: 'textarea[autoresize]'\n})], ThreadViewComponent);\nexport { ThreadViewComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","takeUntil","Subject","Directive","HostListener","ThreadViewComponent","constructor","el","renderer","_formBuilder","_router","route","_threadService","_http","threadForm","group","createdBy","required","threadTitle","maxLength","threadBody","commentForm","newCommentCreatedBy","newCommentBody","onInput","textArea","adjustHeight","ngAfterViewInit","nativeElement","style","overflow","height","scrollHeight","ngOnInit","paramMap","pipe","unsubscribe$","subscribe","params","threadId","get","getThread","thread","getCommentsForThread","comments","threadComments","error","console","addComment","newComment","commentId","commentBody","commentCreatedAt","Date","commentLastEditedAt","parentCommentId","parentComment","childComments","addCommentToThread","response","push","deletePost","confirmDelete","confirm","deleteThread","success","navigate","log","message","toggleEdit","isEditing","editedBody","editedTitle","saveChanges","updateThread","updatedThread","deleteComment","filter","comment","toggleEditComment","saveChangesComment","undefined","length","updateComment","significantTimeDifference","object","timeDiff","threadLastEditedAt","getTime","threadCreatedAt","ngOnDestroy","next","complete","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { ThreadService } from './threads.service';\r\nimport { Thread } from './threads';\r\nimport { Comment } from '../comments/comments';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-thread-view',\r\n  templateUrl: './thread-view.component.html',\r\n  styleUrls: ['../../css/thread_view.css']\r\n})\r\n\r\n  @Directive({\r\n    selector: 'textarea[autoresize]'\r\n  })\r\n\r\nexport class ThreadViewComponent implements OnInit, OnDestroy {\r\n  commentForm: FormGroup;\r\n  threadForm: FormGroup; // Initialise a FormGroup object\r\n  thread: Thread = {} as Thread;\r\n  newCommentBody: string = '';\r\n  newCommentCreatedBy: string = '';\r\n  isEditing = false;\r\n  editedTitle: string = '';\r\n  editedBody: string = '';\r\n\r\n  private unsubscribe$ = new Subject<void>();\r\n\r\n\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private _formBuilder: FormBuilder,\r\n    private _router: Router, // Initialise router object for navigation\r\n    private route: ActivatedRoute,\r\n    private _threadService: ThreadService,\r\n    private _http: HttpClient)\r\n  {\r\n    this.threadForm = _formBuilder.group({\r\n      // Define FormBuilder input validation rules\r\n      createdBy: ['', Validators.required],\r\n      threadTitle: ['', [Validators.required, Validators.maxLength(100)]],\r\n      threadBody: ['', [Validators.required, Validators.maxLength(2500)]],\r\n\r\n    });\r\n    this.commentForm= _formBuilder.group({\r\n      newCommentCreatedBy: ['', Validators.required],\r\n      newCommentBody:  ['', Validators.required]\r\n    })\r\n  }\r\n\r\n  @HostListener('input', ['$event.target'])\r\n  onInput(textArea: HTMLTextAreaElement): void {\r\n    this.adjustHeight(textArea);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Adjust the height initially (if there is pre-existing text)\r\n    this.adjustHeight(this.el.nativeElement);\r\n  }\r\n\r\n  private adjustHeight(textArea: HTMLTextAreaElement): void {\r\n    textArea.style.overflow = 'hidden';\r\n    textArea.style.height = 'auto';\r\n    textArea.style.height = textArea.scrollHeight + 'px';\r\n  }\r\n\r\n  // fetches the thread and the comments under the thread\r\n  ngOnInit(): void {\r\n    this.route.paramMap.pipe(\r\n      takeUntil(this.unsubscribe$)\r\n    ).subscribe(params => {\r\n      const threadId = +params.get('id')!;\r\n      // fetches the thread by threadId\r\n      this._threadService.getThread(threadId).subscribe(\r\n        (thread: Thread) => {\r\n          this.thread = thread;\r\n          // fetches the comment that belongs to the thread by threadId\r\n          this._threadService.getCommentsForThread(threadId).subscribe(\r\n            (comments: Comment[]) => {\r\n              this.thread.threadComments = comments;\r\n            },\r\n            (error) => {\r\n              console.error('Error fetching comments', error);\r\n            }\r\n          );\r\n        },\r\n        (error) => {\r\n          console.error('Error fetching thread', error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n  // makes a constructor that takes in several data for comment. It is used in the HTML \"thread-view.component.html\" to add the data from the input\r\n  addComment() {\r\n    const newComment = {\r\n      commentId: 0,\r\n      commentBody: this.newCommentBody,\r\n      commentCreatedAt: new Date(),\r\n      commentLastEditedAt:new Date(),\r\n      threadId: this.thread.threadId,\r\n      thread: null,\r\n      parentCommentId: null,\r\n      parentComment: null,\r\n      createdBy: this.newCommentCreatedBy,\r\n      childComments: [],\r\n    };\r\n    this._threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(\r\n      (response) => {\r\n        this.newCommentBody = '';\r\n        this.newCommentCreatedBy = '';\r\n        newComment.commentId = response.commentId;\r\n        this.thread.threadComments!.push(newComment); //Adds new comment to local representation of thread (because the thread is already loaded and would otherwise need to be refreshed)\r\n      },\r\n      (error) => {\r\n        console.error('Error adding comment', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // deletes the thread by threadId\r\n  deletePost(thread: Thread){\r\n    const confirmDelete = confirm(`Are you sure you want to delete \"${thread.threadTitle}\"`);\r\n    if (confirmDelete){\r\n      this._threadService.deleteThread(thread.threadId).subscribe(\r\n        (response) => {\r\n          if (response.success){\r\n            this._router.navigate(['/']); //Navigate to home page after deleting a thread.\r\n            console.log(response.message);\r\n          }\r\n        },\r\n        error => {\r\n          console.error('Error deleting item', error)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  toggleEdit(thread: Thread) {\r\n    this.isEditing = !this.isEditing;\r\n    this.editedBody = thread.threadBody;\r\n    this.editedTitle = thread.threadTitle;\r\n\r\n  }\r\n\r\n  // saves the changes made on the thread.\r\n  saveChanges(): void {\r\n    this.thread.threadTitle = this.editedTitle;\r\n    this.thread.threadBody = this.editedBody;\r\n\r\n    this._threadService.updateThread(this.thread).subscribe(\r\n      (response) => {\r\n        console.log('Server response:', response);\r\n\r\n        // Update the thread with the response from the server\r\n        if (response.success) {\r\n          this.thread = response.updatedThread;\r\n          this.toggleEdit(this.thread);\r\n\r\n        } else {\r\n          console.error('Error updating thread. Server response:', response);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error saving changes', error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  deleteComment(commentId: number): void {\r\n    this._threadService.deleteComment(commentId).subscribe(\r\n      () => {\r\n        console.log('Comment deleted');\r\n\r\n        // This ensure that the UI update gets updated after deletion\r\n        if (this.thread && this.thread.threadComments) {\r\n          this.thread.threadComments = this.thread.threadComments.filter(comment => comment.commentId !== commentId);\r\n        }\r\n      },\r\n      (error) => console.error('Error deleting comment', error)\r\n    );\r\n  }\r\n\r\n  toggleEditComment(comment: Comment): void {\r\n    comment.isEditing = !comment.isEditing;\r\n    this.editedBody = comment.commentBody;\r\n  }\r\n\r\n  saveChangesComment(comment: Comment, editedBody: string): void {\r\n    if (editedBody !== undefined && editedBody.length >= 1) {\r\n      comment.commentBody = editedBody;\r\n      this._threadService.updateComment(comment).subscribe(\r\n        (response) => {\r\n          console.log(\"Comment has been updated\");\r\n          this.toggleEditComment(comment);\r\n        },\r\n        (error) => {\r\n          console.error('Error saving changes', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Attempted to save changes with undefined editedBody');\r\n    }\r\n  }\r\n\r\n\r\n  // LastEditedAt value is only displayed when time difference is over 1s (60*1000ms)\r\n  significantTimeDifference(object: any): boolean {\r\n    let timeDiff: number;\r\n    if (\"threadCreatedAt\" in object) { //If object contains threadCreatedAt field, it must be a thread.\r\n       timeDiff = new Date(object.threadLastEditedAt).getTime() - new Date(object.threadCreatedAt).getTime();\r\n    } else {\r\n       timeDiff = new Date(object.commentLastEditedAt).getTime() - new Date(object.commentCreatedAt).getTime();\r\n    }\r\n    return timeDiff > (60*1000)\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
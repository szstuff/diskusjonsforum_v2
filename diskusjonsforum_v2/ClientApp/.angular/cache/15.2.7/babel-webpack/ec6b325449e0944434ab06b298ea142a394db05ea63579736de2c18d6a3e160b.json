{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./threads.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"@angular/common\";\nfunction ThreadformComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"b\");\n    i0.ɵɵtext(2, \"Maximum length exceeded (max 100 characters).\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadformComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"b\");\n    i0.ɵɵtext(2, \"Maximum length exceeded (max 2500 characters).\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class ThreadformComponent {\n  constructor(_formBuilder, _router,\n  // Initialise router object for navigation\n  _threadService, _http) {\n    this._formBuilder = _formBuilder;\n    this._router = _router;\n    this._threadService = _threadService;\n    this._http = _http;\n    this.threadForm = _formBuilder.group({\n      // Define FormBuilder input validation rules\n      createdBy: ['', Validators.required],\n      threadTitle: ['', [Validators.required, Validators.maxLength(100)]],\n      threadBody: ['', [Validators.required, Validators.maxLength(2500)]]\n    });\n  }\n  onSubmit() {\n    console.log(\"ThreadCreate from submitted:\");\n    console.log(this.threadForm);\n    console.log('The thread ' + this.threadForm.value.title + ' is created.');\n    console.log(this.threadForm.touched);\n    const newThread = this.threadForm.value; // Creates a Thread object with values from the form\n    this._threadService.createThread(newThread) //Send the new thread to ThreadService->ThreadController to save\n    .subscribe(response => {\n      if (response.success) {\n        console.log(response.message);\n        this._router.navigate(['/threads']); // navigates back to /threads\n      } else {\n        console.log('Thread creation failed');\n      }\n    });\n  }\n  backToThreads() {\n    this._router.navigate(['/threads']); //navigates back to table view of threads\n  }\n}\n\nThreadformComponent.ɵfac = function ThreadformComponent_Factory(t) {\n  return new (t || ThreadformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ThreadService), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\nThreadformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadformComponent,\n  selectors: [[\"app-threads-threadform\"]],\n  decls: 25,\n  vars: 4,\n  consts: [[1, \"tabelLabel\", \"text-white\"], [1, \"form-box\"], [1, \"create-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [1, \"create-information\"], [\"for\", \"createdBy\", 1, \"input-label\"], [\"type\", \"text\", \"id\", \"createdBy\", \"formControlName\", \"createdBy\", 1, \"form-control\", \"username-input\"], [\"for\", \"threadTitle\", 1, \"input-label\"], [\"type\", \"text\", \"id\", \"threadTitle\", \"formControlName\", \"threadTitle\", 1, \"form-control\", \"title-input\"], [\"class\", \"error-form\", 4, \"ngIf\"], [\"for\", \"threadBody\", 1, \"input-label\"], [\"type\", \"text\", \"id\", \"threadBody\", \"formControlName\", \"threadBody\", 1, \"form-control\", \"body-input\"], [1, \"create-thread-buttons\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"create-button\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", \"cancel-button\", 3, \"click\"], [1, \"error-form\"]],\n  template: function ThreadformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1, \"Create Thread\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function ThreadformComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵtemplate(14, ThreadformComponent_div_14_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 5)(16, \"label\", 11);\n      i0.ɵɵtext(17, \"Body:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"textarea\", 12);\n      i0.ɵɵtemplate(19, ThreadformComponent_div_19_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"div\", 13)(21, \"button\", 14);\n      i0.ɵɵtext(22, \"Create Thread\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function ThreadformComponent_Template_button_click_23_listener() {\n        return ctx.backToThreads();\n      });\n      i0.ɵɵtext(24, \"Cancel\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.threadForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.threadForm.get(\"threadTitle\")) == null ? null : tmp_1_0.hasError(\"maxlength\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.threadForm.get(\"threadBody\")) == null ? null : tmp_2_0.hasError(\"maxlength\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.threadForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 374:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/postcss-loader/dist/cjs.js):\\\\nSyntaxError\\\\n\\\\n(282:3) C:\\\\\\\\Users\\\\\\\\linn2\\\\\\\\RiderProjects\\\\\\\\diskusjonsforum_v2\\\\\\\\diskusjonsforum_v2\\\\\\\\ClientApp\\\\\\\\src\\\\\\\\css\\\\\\\\thread_view.css Unknown word\\\\n\\\\n \\\\u001b[90m 280 | \\\\u001b[39m  text-align\\\\u001b[33m:\\\\u001b[39m center\\\\u001b[33m;\\\\u001b[39m\\\\n \\\\u001b[90m 281 | \\\\u001b[39m  margin-bottom\\\\u001b[33m:\\\\u001b[39m -20px\\\\u001b[33m;\\\\u001b[39m\\\\n\\\\u001b[1m\\\\u001b[31m>\\\\u001b[39m\\\\u001b[22m\\\\u001b[90m 282 | \\\\u001b[39m  mar\\\\n \\\\u001b[90m     | \\\\u001b[39m  \\\\u001b[1m\\\\u001b[31m^\\\\u001b[39m\\\\u001b[22m\\\\n \\\\u001b[90m 283 | \\\\u001b[39m\\\\u001b[33m}\\\\u001b[39m\\\\n \\\\u001b[90m 284 | \\\\u001b[39m\\\\n\\\");\\n\\n })\\n\\n \\t})[_ngcontent-%COMP%];\\n\\n \\t\\n \\t//[_ngcontent-%COMP%]   startup[_ngcontent-%COMP%]   //[_ngcontent-%COMP%]   Load[_ngcontent-%COMP%]   entry[_ngcontent-%COMP%]   module[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   return[_ngcontent-%COMP%]   exports[_ngcontent-%COMP%]   //[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   entry[_ngcontent-%COMP%]   module[_ngcontent-%COMP%]   doesn't[_ngcontent-%COMP%]   tell[_ngcontent-%COMP%]   about[_ngcontent-%COMP%]   it's[_ngcontent-%COMP%]   top-level[_ngcontent-%COMP%]   declarations[_ngcontent-%COMP%]   so[_ngcontent-%COMP%]   it[_ngcontent-%COMP%]   can't[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   inlined[_ngcontent-%COMP%]   var[_ngcontent-%COMP%]   __webpack_exports__[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] {};\\n \\t__webpack_modules__[374]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\\n/*# sourceMappingURL=thread_view.css.map*/\"]\n});","map":{"version":3,"mappings":"AACA,SAAoBA,UAAU,QAAqB,gBAAgB;;;;;;;;;ICavDC,+BAAqF;IAChFA,6DAA6C;IAAAA,iBAAI;;;;;IAOtDA,+BAAoF;IAC/EA,8DAA8C;IAAAA,iBAAI;;;ADXnE,OAAM,MAAOC,mBAAmB;EAG9BC,YACUC,YAAyB,EACzBC,OAAe;EAAE;EACjBC,cAA6B,EAC7BC,KAAiB;IAHjB,iBAAY,GAAZH,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,mBAAc,GAAdC,cAAc;IACd,UAAK,GAALC,KAAK;IAEb,IAAI,CAACC,UAAU,GAAGJ,YAAY,CAACK,KAAK,CAAC;MACnC;MACAC,SAAS,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACpCC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MACnEC,UAAU,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,SAAS,CAAC,IAAI,CAAC,CAAC;KAEnE,CAAC;EACJ;EAGAE,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,UAAU,CAAC;IAC5BQ,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACT,UAAU,CAACU,KAAK,CAACC,KAAK,GAAG,cAAc,CAAC;IACzEH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,UAAU,CAACY,OAAO,CAAC;IACpC,MAAMC,SAAS,GAAG,IAAI,CAACb,UAAU,CAACU,KAAK,CAAC,CAAC;IACzC,IAAI,CAACZ,cAAc,CAACgB,YAAY,CAACD,SAAS,CAAC,CAAC;IAAA,CACzCE,SAAS,CAACC,QAAQ,IAAG;MACtB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpBT,OAAO,CAACC,GAAG,CAACO,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAACrB,OAAO,CAACsB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAE;OACvC,MACI;QACHX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;IAEzC,CAAC,CAAC;EACJ;EAEAW,aAAa;IACX,IAAI,CAACvB,OAAO,CAACsB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvC;;;AAvCWzB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZhChC,6BAAkC;MAAAA,6BAAa;MAAAA,iBAAK;MAEpDA,8BAAsB;MAEaA;QAAA,OAAYiC,cAAU;MAAA,EAAC;MACpDjC,8BAAwB;MAEuBA,yBAAS;MAAAA,iBAAQ;MAC1DA,2BAAoG;MACxGA,iBAAM;MAENA,+BAAgC;MACeA,uBAAM;MAAAA,iBAAQ;MACzDA,4BAAqG;MACrGA,uEAEM;MACVA,iBAAM;MAENA,+BAAgC;MACcA,sBAAK;MAAAA,iBAAQ;MACvDA,gCAA8G;MAC9GA,uEAEM;MACVA,iBAAM;MAGRA,gCAAmC;MAC2DA,8BAAa;MAAAA,iBAAS;MAClHA,mCAA0E;MAA1BA;QAAA,OAASiC,mBAAe;MAAA,EAAC;MAACjC,uBAAM;MAAAA,iBAAS;;;;;MA1BvFA,eAAwB;MAAxBA,0CAAwB;MAUGA,gBAA0D;MAA1DA,mHAA0D;MAQ1DA,eAAyD;MAAzDA,kHAAyD;MAO1BA,eAA+B;MAA/BA,iDAA+B","names":["Validators","i0","ThreadformComponent","constructor","_formBuilder","_router","_threadService","_http","threadForm","group","createdBy","required","threadTitle","maxLength","threadBody","onSubmit","console","log","value","title","touched","newThread","createThread","subscribe","response","success","message","navigate","backToThreads","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threadform.component.ts","C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threadform.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ThreadService } from './threads.service';\r\n\r\n@Component({\r\n  selector: 'app-threads-threadform',\r\n  templateUrl: './threadform.component.html', // path to the HTML component\r\n  styleUrls: ['../../css/thread_view.css'],\r\n})\r\n\r\nexport class ThreadformComponent {\r\n  threadForm: FormGroup; // Initialise a FormGroup object\r\n\r\n  constructor(\r\n    private _formBuilder: FormBuilder,\r\n    private _router: Router, // Initialise router object for navigation\r\n    private _threadService: ThreadService,\r\n    private _http: HttpClient)\r\n  {\r\n    this.threadForm = _formBuilder.group({\r\n      // Define FormBuilder input validation rules\r\n      createdBy: ['', Validators.required],\r\n      threadTitle: ['', [Validators.required, Validators.maxLength(100)]],\r\n      threadBody: ['', [Validators.required, Validators.maxLength(2500)]],\r\n\r\n    });\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    console.log(\"ThreadCreate from submitted:\");\r\n    console.log(this.threadForm);\r\n    console.log('The thread ' + this.threadForm.value.title + ' is created.');\r\n    console.log(this.threadForm.touched);\r\n    const newThread = this.threadForm.value; // Creates a Thread object with values from the form\r\n    this._threadService.createThread(newThread) //Send the new thread to ThreadService->ThreadController to save\r\n      .subscribe(response => {\r\n      if (response.success) {\r\n        console.log(response.message);\r\n        this._router.navigate(['/threads']);  // navigates back to /threads\r\n      }\r\n      else {\r\n        console.log('Thread creation failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  backToThreads() {\r\n    this._router.navigate(['/threads']); //navigates back to table view of threads\r\n  }\r\n}\r\n","<h2 class=\"tabelLabel text-white\">Create Thread</h2>\r\n\r\n<div class=\"form-box\">\r\n  <div class=\"create-container\">\r\n    <form [formGroup]=\"threadForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"form-group\">\r\n        <div class=\"create-information\">\r\n          <label class=\"input-label\" for=\"createdBy\">Username:</label>\r\n            <input type=\"text\" id=\"createdBy\" formControlName=\"createdBy\" class=\"form-control username-input\" />\r\n        </div>\r\n\r\n        <div class=\"create-information\">\r\n          <label class=\"input-label\" for=\"threadTitle\">Title:</label>\r\n            <input type=\"text\" id=\"threadTitle\" formControlName=\"threadTitle\" class=\"form-control title-input\" />\r\n            <div class=\"error-form\" *ngIf=\"threadForm.get('threadTitle')?.hasError('maxlength')\">\r\n              <b>Maximum length exceeded (max 100 characters).</b>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"create-information\">\r\n          <label class=\"input-label\" for=\"threadBody\">Body:</label>\r\n            <textarea type=\"text\" id=\"threadBody\" formControlName=\"threadBody\" class=\"form-control body-input\"></textarea>\r\n            <div class=\"error-form\" *ngIf=\"threadForm.get('threadBody')?.hasError('maxlength')\">\r\n              <b>Maximum length exceeded (max 2500 characters).</b>\r\n            </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"create-thread-buttons\">\r\n        <button type=\"submit\" class=\"btn btn-primary create-button\" [disabled]=\"threadForm.invalid\">Create Thread</button>\r\n        <button class=\"btn btn-secondary cancel-button\" (click)=\"backToThreads()\">Cancel</button>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
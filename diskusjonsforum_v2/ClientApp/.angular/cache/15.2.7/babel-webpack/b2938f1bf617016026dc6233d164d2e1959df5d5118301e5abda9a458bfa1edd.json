{"ast":null,"code":"import { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./threads.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction ThreadViewComponent_div_0_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last edited: \", i0.ɵɵpipeBind2(3, 1, ctx_r4.thread.threadLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nfunction ThreadViewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 4)(2, \"h1\", 5);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 6)(5, \"p\");\n    i0.ɵɵtext(6, \" Posted by \");\n    i0.ɵɵelementStart(7, \"b\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \" on the \");\n    i0.ɵɵelementStart(10, \"b\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \". \");\n    i0.ɵɵtemplate(14, ThreadViewComponent_div_0_span_14_Template, 4, 4, \"span\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"hr\");\n    i0.ɵɵelementStart(16, \"p\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"div\")(19, \"p\", 8);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.thread.threadTitle);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r0.thread.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(12, 6, ctx_r0.thread.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.thread.threadCreatedAt !== ctx_r0.thread.threadLastEditedAt);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.thread.threadBody);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.thread.threadComments == null ? null : ctx_r0.thread.threadComments.length, \" Comments\");\n  }\n}\nfunction ThreadViewComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"p\");\n    i0.ɵɵtext(2, \"The requested thread was not found.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_3_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"No comments yet.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_3_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const comment_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r7.commentBody);\n  }\n}\nfunction ThreadViewComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"h3\");\n    i0.ɵɵtext(2, \"Comments\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 10)(4, \"textarea\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function ThreadViewComponent_div_3_Template_textarea_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.newCommentBody = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_3_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.addComment());\n    });\n    i0.ɵɵtext(6, \"Add Comment\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, ThreadViewComponent_div_3_div_7_Template, 3, 0, \"div\", 7);\n    i0.ɵɵtemplate(8, ThreadViewComponent_div_3_div_8_Template, 3, 1, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newCommentBody);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.thread.threadComments || ctx_r3.thread.threadComments.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.thread.threadComments);\n  }\n}\nexport class ThreadViewComponent {\n  constructor(route, threadService) {\n    this.route = route;\n    this.threadService = threadService;\n    this.thread = {};\n    this.newCommentBody = '';\n    this.unsubscribe$ = new Subject();\n  }\n  ngOnInit() {\n    this.route.paramMap.pipe(takeUntil(this.unsubscribe$)).subscribe(params => {\n      const threadId = +params.get('id');\n      this.threadService.getThread(threadId).subscribe(thread => {\n        this.thread = thread;\n        this.threadService.getCommentsForThread(threadId).subscribe(comments => {\n          this.thread.threadComments = comments;\n        }, error => {\n          console.error('Error fetching comments', error);\n        });\n      }, error => {\n        console.error('Error fetching thread', error);\n      });\n    });\n  }\n  addComment() {\n    const newComment = {\n      commentId: 0,\n      commentBody: this.newCommentBody,\n      commentCreatedAt: new Date(),\n      commentLastEditedAt: new Date(),\n      threadId: this.thread.threadId,\n      thread: null,\n      parentCommentId: null,\n      parentComment: null,\n      createdBy: null,\n      childComments: []\n    };\n    this.threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(updatedThread => {\n      this.thread = updatedThread;\n      this.newCommentBody = '';\n    }, error => {\n      console.error('Error adding comment', error);\n    });\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\nThreadViewComponent.ɵfac = function ThreadViewComponent_Factory(t) {\n  return new (t || ThreadViewComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ThreadService));\n};\nThreadViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadViewComponent,\n  selectors: [[\"app-thread-view\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[\"class\", \"container mt-5\", 4, \"ngIf\", \"ngIfElse\"], [\"notFound\", \"\"], [\"id\", \"displayComments\", 4, \"ngIf\"], [1, \"container\", \"mt-5\"], [\"id\", \"displayPost\"], [1, \"thread-title-current\"], [1, \"thread-information\"], [4, \"ngIf\"], [1, \"comment-count\"], [\"id\", \"displayComments\"], [\"id\", \"textBox\"], [\"placeholder\", \"What are your thoughts?\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function ThreadViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ThreadViewComponent_div_0_Template, 21, 9, \"div\", 0);\n      i0.ɵɵtemplate(1, ThreadViewComponent_ng_template_1_Template, 3, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(3, ThreadViewComponent_div_3_Template, 9, 3, \"div\", 2);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread.threadId)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i3.DatePipe],\n  styles: [\".container[_ngcontent-%COMP%]{\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n}\\r\\n\\r\\n#displayPost[_ngcontent-%COMP%]{\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n}\\r\\n\\r\\n#displayComments[_ngcontent-%COMP%]{\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n  width: 83%;\\r\\n  max-width: 1400px;\\r\\n  margin: 0 auto;\\r\\n  padding-left: 15px;\\r\\n}\\r\\n\\r\\n#textBox[_ngcontent-%COMP%] {\\r\\n  max-width: 1000px;\\r\\n}\\r\\n\\r\\n#txtBody[_ngcontent-%COMP%]{\\r\\n  min-height: 150px;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  padding-bottom: 15px;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%]   button[_ngcontent-%COMP%], .form-group[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jc3MvVGhyZWFkU3R5bGUuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixpQkFBaUI7RUFDakIsY0FBYztFQUNkLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXJ7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG59XHJcblxyXG4jZGlzcGxheVBvc3R7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG59XHJcblxyXG4jZGlzcGxheUNvbW1lbnRze1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICB3aWR0aDogODMlO1xyXG4gIG1heC13aWR0aDogMTQwMHB4O1xyXG4gIG1hcmdpbjogMCBhdXRvO1xyXG4gIHBhZGRpbmctbGVmdDogMTVweDtcclxufVxyXG5cclxuI3RleHRCb3gge1xyXG4gIG1heC13aWR0aDogMTAwMHB4O1xyXG59XHJcblxyXG4jdHh0Qm9keXtcclxuICBtaW4taGVpZ2h0OiAxNTBweDtcclxufVxyXG5cclxuLmZvcm0tZ3JvdXAge1xyXG4gIHBhZGRpbmctYm90dG9tOiAxNXB4O1xyXG59XHJcblxyXG4uZm9ybS1ncm91cCBidXR0b24sIC5mb3JtLWdyb3VwIGEge1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG5cclxuLmZvcm0tZ3JvdXAgYSB7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["takeUntil","Subject","i0","ThreadViewComponent","constructor","route","threadService","ngOnInit","paramMap","pipe","unsubscribe$","subscribe","params","threadId","get","getThread","thread","getCommentsForThread","comments","threadComments","error","console","addComment","newComment","commentId","commentBody","newCommentBody","commentCreatedAt","Date","commentLastEditedAt","parentCommentId","parentComment","createdBy","childComments","addCommentToThread","updatedThread","ngOnDestroy","next","complete","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.ts","C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ThreadService } from './threads.service';\r\nimport { Thread } from './threads';\r\nimport { Comment } from '../comments/comments';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-thread-view',\r\n  templateUrl: './thread-view.component.html',\r\n  styleUrls: ['../../css/ThreadStyle.css']\r\n})\r\nexport class ThreadViewComponent implements OnInit, OnDestroy {\r\n  thread: Thread = {} as Thread;\r\n  newCommentBody: string = '';\r\n\r\n  private unsubscribe$ = new Subject<void>();\r\n\r\n  constructor(private route: ActivatedRoute, private threadService: ThreadService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.pipe(\r\n      takeUntil(this.unsubscribe$)\r\n    ).subscribe(params => {\r\n      const threadId = +params.get('id')!;\r\n\r\n      this.threadService.getThread(threadId).subscribe(\r\n        (thread: Thread) => {\r\n          this.thread = thread;\r\n\r\n          this.threadService.getCommentsForThread(threadId).subscribe(\r\n            (comments: Comment[]) => {\r\n              this.thread.threadComments = comments;\r\n            },\r\n            (error) => {\r\n              console.error('Error fetching comments', error);\r\n            }\r\n          );\r\n        },\r\n        (error) => {\r\n          console.error('Error fetching thread', error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  addComment() {\r\n    const newComment = {\r\n      commentId: 0,\r\n      commentBody: this.newCommentBody,\r\n      commentCreatedAt: new Date(),\r\n      commentLastEditedAt:new Date(),\r\n      threadId: this.thread.threadId,\r\n      thread: null,\r\n      parentCommentId: null,\r\n      parentComment: null,\r\n      createdBy: null,\r\n      childComments: [],\r\n    };\r\n\r\n    this.threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(\r\n      (updatedThread: Thread) => {\r\n        this.thread = updatedThread;\r\n        this.newCommentBody = '';\r\n      },\r\n      (error) => {\r\n        console.error('Error adding comment', error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n}\r\n","<div class=\"container mt-5\" *ngIf=\"thread.threadId; else notFound\">\r\n  <div id=\"displayPost\">\r\n    <!-- Thread title -->\r\n    <h1 class=\"thread-title-current\">{{ thread.threadTitle }}</h1>\r\n\r\n    <div class=\"thread-information\">\r\n      <!-- Thread information: user, post date, last edited date -->\r\n      <p>\r\n        Posted by <b>{{ thread.createdBy }}</b> on the <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>.\r\n        <!-- Display last edited date if different -->\r\n        <span *ngIf=\"thread.threadCreatedAt !== thread.threadLastEditedAt\">\r\n          <i>Last edited: {{ thread.threadLastEditedAt | date: 'yyyy-MM-dd HH:mm' }}</i>\r\n        </span>\r\n      </p>\r\n      <hr />\r\n      <p>{{ thread.threadBody }}</p>\r\n    </div>\r\n    <div><p class=\"comment-count\">{{ thread.threadComments?.length }} Comments</p></div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #notFound>\r\n  <div class=\"container mt-5\">\r\n    <p>The requested thread was not found.</p>\r\n  </div>\r\n</ng-template>\r\n\r\n<div id=\"displayComments\" *ngIf=\"thread\">\r\n  <h3>Comments</h3>\r\n\r\n  <!-- Input box for adding comments -->\r\n  <div id=\"textBox\">\r\n    <textarea [(ngModel)]=\"newCommentBody\" placeholder=\"What are your thoughts?\"></textarea>\r\n    <button (click)=\"addComment()\">Add Comment</button>\r\n  </div>\r\n\r\n  <!-- Display existing comments -->\r\n  <div *ngIf=\"!thread.threadComments || thread.threadComments.length === 0\">\r\n    <p>No comments yet.</p>\r\n  </div>\r\n  <div *ngFor=\"let comment of thread.threadComments\">\r\n    <p>{{ comment.commentBody }}</p>\r\n  </div>\r\n</div>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
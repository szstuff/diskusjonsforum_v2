{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./threads.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = function (a1) {\n  return [\"/threads\", a1];\n};\nfunction ThreadsComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 7)(2, \"div\", 8)(3, \"div\")(4, \"p\", 9)(5, \"b\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" posted on \");\n    i0.ɵɵelementStart(8, \"b\");\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(11, \"hr\");\n    i0.ɵɵelementStart(12, \"p\", 10)(13, \"b\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"p\", 11);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\", 12);\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const thread_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(9, _c0, thread_r1.threadId));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(thread_r1.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(10, 6, thread_r1.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(thread_r1.threadTitle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(thread_r1.threadBody);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", thread_r1.threadComments == null ? null : thread_r1.threadComments.length, \" replies\");\n  }\n}\nconst _c1 = \"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\";\nexport class ThreadsComponent {\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log('In setter:', value);\n    this.filteredThreads = this.performFilter(value);\n  }\n  constructor(_threadService, _http, _router, route) {\n    this._threadService = _threadService;\n    this._http = _http;\n    this._router = _router;\n    this.route = route;\n    this.viewTitle = 'Table';\n    this.threads = [];\n    this._listFilter = '';\n    this.filteredThreads = this.threads;\n  }\n  getThreads() {\n    this._threadService.getThreads().subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.threads = data;\n      this.filteredThreads = this.threads;\n    }, error => {\n      console.error('Error getting threads', error);\n      // Handle the error, e.g., display an error message to the user\n      // For now, let's log a generic error message to the console\n      console.error('An error occurred while fetching threads. Please try again later.');\n    });\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.threads.filter(thread => thread.threadTitle.toLocaleLowerCase().includes(filterBy));\n  }\n  navigateToThreadform() {\n    this._router.navigate(['/threadForm']);\n  }\n  ngOnInit() {\n    console.log('ThreadsComponent created');\n    this.getThreads();\n  }\n  update(thread) {\n    this._threadService.updateThread(thread).subscribe(() => {\n      console.log('Thread updated');\n    }, error => {\n      console.error('Error updating thread', error);\n    });\n  }\n  delete(threadId) {\n    this._threadService.deleteThread(threadId).subscribe(() => {\n      console.log('Thread deleted');\n      // Refresh the thread list or perform other actions after deletion\n      this.getThreads();\n    }, error => {\n      console.error('Error deleting thread', error);\n    });\n  }\n  search(searchQuery) {\n    this._threadService.searchThreads(searchQuery).subscribe(searchResults => {\n      console.log('Search results', searchResults);\n      // Handle the search results as needed\n    }, error => {\n      console.error('Error searching threads', error);\n    });\n  }\n}\nThreadsComponent.ɵfac = function ThreadsComponent_Factory(t) {\n  return new (t || ThreadsComponent)(i0.ɵɵdirectiveInject(i1.ThreadService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nThreadsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadsComponent,\n  selectors: [[\"app-thread-component\"]],\n  decls: 11,\n  vars: 2,\n  consts: [[\"id\", \"tabelLabel\"], [1, \"container\"], [1, \"row\"], [1, \"col-md-2\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [3, \"routerLink\"], [1, \"post\"], [1, \"thread-information\"], [1, \"title-thread\"], [1, \"thread-text\"], [1, \"comment-count\"]],\n  template: function ThreadsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Explore discussions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3);\n      i0.ɵɵtext(5, \"Filter by:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\")(7, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function ThreadsComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.listFilter = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(8, ThreadsComponent_div_8_Template, 19, 11, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function ThreadsComponent_Template_button_click_9_listener() {\n        return ctx.navigateToThreadform();\n      });\n      i0.ɵɵtext(10, \"Create New Thread\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.listFilter);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.threads);\n    }\n  },\n  dependencies: [i4.NgForOf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i3.RouterLink, i4.DatePipe],\n  styles: [_c1, _c1]\n});","map":{"version":3,"mappings":"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","names":["i0","ThreadsComponent","listFilter","_listFilter","value","console","log","filteredThreads","performFilter","constructor","_threadService","_http","_router","route","threads","getThreads","subscribe","data","JSON","stringify","error","filterBy","toLocaleLowerCase","filter","thread","threadTitle","includes","navigateToThreadform","navigate","ngOnInit","update","updateThread","delete","threadId","deleteThread","search","searchQuery","searchThreads","searchResults","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.component.html","C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.component.ts"],"sourcesContent":["<h1 id=\"tabelLabel\">Explore discussions</h1>\r\n\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-2\">Filter by:</div>\r\n    <div>\r\n      <input class=\"form-control\" type=\"text\" [(ngModel)]=\"listFilter\" />\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div *ngFor=\"let thread of threads\">\r\n    <a [routerLink]=\"['/threads', thread.threadId]\">\r\n      <div class=\"post\">\r\n        <div>\r\n          <p class=\"thread-information\">\r\n            <b>{{ thread.createdBy }}</b> posted on\r\n            <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>\r\n          </p>\r\n          <hr />\r\n          <p class=\"title-thread\"><b>{{ thread.threadTitle }}</b></p>\r\n          <p class=\"thread-text\">{{ thread.threadBody }}</p>\r\n          <p class=\"comment-count\">{{ thread.threadComments?.length }} replies</p>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  </div>\r\n</div>\r\n\r\n<button class=\"btn btn-primary\" (click)=\"navigateToThreadform()\">Create New Thread</button>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Thread } from './threads';\r\nimport { ThreadService } from \"./threads.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-thread-component',\r\n  templateUrl: './threads.component.html',\r\n  styleUrls: ['../../IndexStyle.css','../../thread_table.css']\r\n})\r\n\r\nexport class ThreadsComponent implements OnInit {\r\n  viewTitle: string = 'Table';\r\n  threads: Thread[] = [];\r\n  private _listFilter: string = '';\r\n  get listFilter(): string {\r\n    return this._listFilter;\r\n  }\r\n\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    console.log('In setter:', value);\r\n    this.filteredThreads = this.performFilter(value);\r\n  }\r\n\r\n  filteredThreads: Thread[] = this.threads;\r\n  constructor(\r\n    private _threadService: ThreadService,\r\n    private _http: HttpClient,\r\n    private _router: Router,\r\n    private route: ActivatedRoute) { }\r\n\r\n  getThreads(): void {\r\n    this._threadService.getThreads()\r\n      .subscribe(data => {\r\n        console.log('All', JSON.stringify(data));\r\n        this.threads = data;\r\n        this.filteredThreads = this.threads;\r\n      },\r\n      (error) => {\r\n        console.error('Error getting threads', error);\r\n        // Handle the error, e.g., display an error message to the user\r\n        // For now, let's log a generic error message to the console\r\n        console.error('An error occurred while fetching threads. Please try again later.');\r\n      }\r\n    );\r\n  }\r\n\r\n  performFilter(filterBy: string): Thread[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.threads.filter((thread: Thread) =>\r\n      thread.threadTitle.toLocaleLowerCase().includes(filterBy)\r\n    );\r\n  }\r\n\r\n  navigateToThreadform(){\r\n    this._router.navigate(['/threadForm']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('ThreadsComponent created');\r\n    this.getThreads();\r\n  }\r\n\r\n  update(thread: Thread): void {\r\n    this._threadService.updateThread(thread).subscribe(\r\n      ()=>{\r\n        console.log('Thread updated');\r\n      },\r\n      (error) =>{\r\n        console.error('Error updating thread', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  delete(threadId: number): void{\r\n    this._threadService.deleteThread(threadId).subscribe(\r\n      ()=>{\r\n        console.log('Thread deleted');\r\n        // Refresh the thread list or perform other actions after deletion\r\n        this.getThreads();\r\n      },\r\n      (error) => {\r\n        console.error('Error deleting thread', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  search(searchQuery: string): void {\r\n    this._threadService.searchThreads(searchQuery).subscribe(\r\n      (searchResults) => {\r\n        console.log('Search results', searchResults);\r\n        // Handle the search results as needed\r\n      },\r\n      (error) => {\r\n        console.error('Error searching threads', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ThreadsComponent = class ThreadsComponent {\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log('In setter:', value);\n    this.filteredThreads = this.performFilter(value);\n  }\n  constructor(_threadService, _http, _router, route) {\n    this._threadService = _threadService;\n    this._http = _http;\n    this._router = _router;\n    this.route = route;\n    this.viewTitle = 'Table';\n    this.threads = [];\n    this._listFilter = '';\n    this.filteredThreads = this.threads;\n  }\n  getThreads() {\n    this._threadService.getThreads().subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.threads = data;\n      this.filteredThreads = this.threads;\n    }, error => {\n      console.error('Error getting threads', error);\n      // Handle the error, e.g., display an error message to the user\n      // For now, let's log a generic error message to the console\n      console.error('An error occurred while fetching threads. Please try again later.');\n    });\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.threads.filter(thread => thread.threadTitle.toLocaleLowerCase().includes(filterBy));\n  }\n  navigateToThreadform() {\n    this._router.navigate(['/threadForm']);\n  }\n  ngOnInit() {\n    console.log('ThreadsComponent created');\n    this.getThreads();\n  }\n  update(thread) {\n    this._threadService.updateThread(thread).subscribe(() => {\n      console.log('Thread updated');\n    }, error => {\n      console.error('Error updating thread', error);\n    });\n  }\n  delete(threadId) {\n    this._threadService.deleteThread(threadId).subscribe(() => {\n      console.log('Thread deleted');\n      // Refresh the thread list or perform other actions after deletion\n      this.getThreads();\n    }, error => {\n      console.error('Error deleting thread', error);\n    });\n  }\n  search(searchQuery) {\n    this._threadService.searchThreads(searchQuery).subscribe(searchResults => {\n      console.log('Search results', searchResults);\n      // Handle the search results as needed\n    }, error => {\n      console.error('Error searching threads', error);\n    });\n  }\n};\nThreadsComponent = __decorate([Component({\n  selector: 'app-thread-component',\n  templateUrl: './threads.component.html',\n  styleUrls: ['../../css/IndexStyle.css', '../../css/thread_table.css']\n})], ThreadsComponent);\nexport { ThreadsComponent };","map":{"version":3,"mappings":"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","names":["Component","ThreadsComponent","listFilter","_listFilter","value","console","log","filteredThreads","performFilter","constructor","_threadService","_http","_router","route","threads","getThreads","subscribe","data","JSON","stringify","error","filterBy","toLocaleLowerCase","filter","thread","threadTitle","includes","navigateToThreadform","navigate","ngOnInit","update","updateThread","delete","threadId","deleteThread","search","searchQuery","searchThreads","searchResults","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Thread } from './threads';\r\nimport { ThreadService } from \"./threads.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-thread-component',\r\n  templateUrl: './threads.component.html',\r\n  styleUrls: ['../../css/IndexStyle.css','../../css/thread_table.css']\r\n})\r\n\r\nexport class ThreadsComponent implements OnInit {\r\n  viewTitle: string = 'Table';\r\n  threads: Thread[] = [];\r\n  private _listFilter: string = '';\r\n  get listFilter(): string {\r\n    return this._listFilter;\r\n  }\r\n\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    console.log('In setter:', value);\r\n    this.filteredThreads = this.performFilter(value);\r\n  }\r\n\r\n  filteredThreads: Thread[] = this.threads;\r\n  constructor(\r\n    private _threadService: ThreadService,\r\n    private _http: HttpClient,\r\n    private _router: Router,\r\n    private route: ActivatedRoute) { }\r\n\r\n  getThreads(): void {\r\n    this._threadService.getThreads()\r\n      .subscribe(data => {\r\n        console.log('All', JSON.stringify(data));\r\n        this.threads = data;\r\n        this.filteredThreads = this.threads;\r\n      },\r\n      (error) => {\r\n        console.error('Error getting threads', error);\r\n        // Handle the error, e.g., display an error message to the user\r\n        // For now, let's log a generic error message to the console\r\n        console.error('An error occurred while fetching threads. Please try again later.');\r\n      }\r\n    );\r\n  }\r\n\r\n  performFilter(filterBy: string): Thread[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.threads.filter((thread: Thread) =>\r\n      thread.threadTitle.toLocaleLowerCase().includes(filterBy)\r\n    );\r\n  }\r\n\r\n  navigateToThreadform(){\r\n    this._router.navigate(['/threadForm']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('ThreadsComponent created');\r\n    this.getThreads();\r\n  }\r\n\r\n  update(thread: Thread): void {\r\n    this._threadService.updateThread(thread).subscribe(\r\n      ()=>{\r\n        console.log('Thread updated');\r\n      },\r\n      (error) =>{\r\n        console.error('Error updating thread', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  delete(threadId: number): void{\r\n    this._threadService.deleteThread(threadId).subscribe(\r\n      ()=>{\r\n        console.log('Thread deleted');\r\n        // Refresh the thread list or perform other actions after deletion\r\n        this.getThreads();\r\n      },\r\n      (error) => {\r\n        console.error('Error deleting thread', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  search(searchQuery: string): void {\r\n    this._threadService.searchThreads(searchQuery).subscribe(\r\n      (searchResults) => {\r\n        console.log('Search results', searchResults);\r\n        // Handle the search results as needed\r\n      },\r\n      (error) => {\r\n        console.error('Error searching threads', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ThreadService {\n  constructor(_http) {\n    this._http = _http;\n    this.apiUrl = 'api/threads';\n  }\n  getThreads() {\n    return this._http.get(`${this.apiUrl}/getall`);\n  }\n  // Updated getThread to include comments\n  getThread(threadId) {\n    const url = `${this.apiUrl}/getThread/${threadId}`;\n    return this._http.get(url);\n  }\n  // New method to get comments for a thread\n  getCommentsForThread(threadId) {\n    const url = `${this.apiUrl}/getComments/${threadId}`;\n    return this._http.get(url);\n  }\n  addCommentToThread(threadId, newComment) {\n    const url = `${this.apiUrl}/addComment/${threadId}`;\n    // Assuming your server expects the entire updated thread as a response\n    return this._http.post(url, newComment);\n  }\n  createThread(newThread) {\n    const createUrl = `${this.apiUrl}/create`;\n    return this._http.post(createUrl, newThread);\n  }\n  updateThread(thread) {\n    const url = `${this.apiUrl}/update/${thread.threadId}`;\n    return this._http.put(url, thread);\n  }\n  deleteThread(threadId) {\n    const url = `${this.apiUrl}/delete/${threadId}`;\n    return this._http.delete(url);\n  }\n  searchThreads(searchQuery) {\n    const url = `${this.apiUrl}/search?searchQuery=${searchQuery}`;\n    return this._http.get(url);\n  }\n}\nThreadService.ɵfac = function ThreadService_Factory(t) {\n  return new (t || ThreadService)(i0.ɵɵinject(i1.HttpClient));\n};\nThreadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThreadService,\n  factory: ThreadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAFjB,WAAM,GAAG,aAAa;EAEU;EAExCC,UAAU;IACR,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAW,GAAG,IAAI,CAACC,MAAM,SAAS,CAAC;EAC1D;EAEA;EACAC,SAAS,CAACC,QAAgB;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,cAAcE,QAAQ,EAAE;IAClD,OAAO,IAAI,CAACL,KAAK,CAACE,GAAG,CAASI,GAAG,CAAC;EACpC;EAEA;EACAC,oBAAoB,CAACF,QAAgB;IACnC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,gBAAgBE,QAAQ,EAAE;IACpD,OAAO,IAAI,CAACL,KAAK,CAACE,GAAG,CAAYI,GAAG,CAAC;EACvC;EAEAE,kBAAkB,CAACH,QAAgB,EAAEI,UAAmB;IACtD,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,eAAeE,QAAQ,EAAE;IAEnD;IACA,OAAO,IAAI,CAACL,KAAK,CAACU,IAAI,CAASJ,GAAG,EAAEG,UAAU,CAAC;EACjD;EAEAE,YAAY,CAACC,SAAiB;IAC5B,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACV,MAAM,SAAS;IACzC,OAAO,IAAI,CAACH,KAAK,CAACU,IAAI,CAAMG,SAAS,EAAED,SAAS,CAAC;EACnD;EAEAE,YAAY,CAACC,MAAc;IACzB,MAAMT,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,WAAWY,MAAM,CAACV,QAAQ,EAAE;IACtD,OAAO,IAAI,CAACL,KAAK,CAACgB,GAAG,CAACV,GAAG,EAAES,MAAM,CAAC;EACpC;EAEAE,YAAY,CAACZ,QAAgB;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,WAAWE,QAAQ,EAAE;IAC/C,OAAO,IAAI,CAACL,KAAK,CAACkB,MAAM,CAACZ,GAAG,CAAC;EAC/B;EAEAa,aAAa,CAACC,WAAmB;IAC/B,MAAMd,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,uBAAuBiB,WAAW,EAAE;IAC9D,OAAO,IAAI,CAACpB,KAAK,CAACE,GAAG,CAACI,GAAG,CAAC;EAC5B;;AA9CWR,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAuB,SAAbvB,aAAa;EAAAwB,YAFZ;AAAM","names":["ThreadService","constructor","_http","getThreads","get","apiUrl","getThread","threadId","url","getCommentsForThread","addCommentToThread","newComment","post","createThread","newThread","createUrl","updateThread","thread","put","deleteThread","delete","searchThreads","searchQuery","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jovia\\Documents\\OsloMet\\5 semester\\ITPE3200 - Angular Eksamen\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Thread } from \"./threads\";\r\nimport { Comment } from '../comments/comments'\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ThreadService {\r\n  private apiUrl = 'api/threads';\r\n\r\n  constructor(private _http: HttpClient) {}\r\n\r\n  getThreads(): Observable<Thread[]> {\r\n    return this._http.get<Thread[]>(`${this.apiUrl}/getall`);\r\n  }\r\n\r\n  // Updated getThread to include comments\r\n  getThread(threadId: number): Observable<Thread> {\r\n    const url = `${this.apiUrl}/getThread/${threadId}`;\r\n    return this._http.get<Thread>(url);\r\n  }\r\n\r\n  // New method to get comments for a thread\r\n  getCommentsForThread(threadId: number): Observable<Comment[]> {\r\n    const url = `${this.apiUrl}/getComments/${threadId}`;\r\n    return this._http.get<Comment[]>(url);\r\n  }\r\n\r\n  addCommentToThread(threadId: number, newComment: Comment): Observable<Thread> {\r\n    const url = `${this.apiUrl}/addComment/${threadId}`;\r\n\r\n    // Assuming your server expects the entire updated thread as a response\r\n    return this._http.post<Thread>(url, newComment);\r\n  }\r\n\r\n  createThread(newThread: Thread): Observable<any> {\r\n    const createUrl = `${this.apiUrl}/create`;\r\n    return this._http.post<any>(createUrl, newThread);\r\n  }\r\n\r\n  updateThread(thread: Thread): Observable<any>{\r\n    const url = `${this.apiUrl}/update/${thread.threadId}`;\r\n    return this._http.put(url, thread);\r\n  }\r\n\r\n  deleteThread(threadId: number): Observable<any>{\r\n    const url = `${this.apiUrl}/delete/${threadId}`;\r\n    return this._http.delete(url);\r\n  }\r\n\r\n  searchThreads(searchQuery: string): Observable<any> {\r\n    const url = `${this.apiUrl}/search?searchQuery=${searchQuery}`;\r\n    return this._http.get(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./threads.service\";\nimport * as i4 from \"@angular/common/http\";\nexport class ThreadformComponent {\n  constructor(_formBuilder, _router,\n  // Initialise router object for navigation\n  _threadService, _http) {\n    this._formBuilder = _formBuilder;\n    this._router = _router;\n    this._threadService = _threadService;\n    this._http = _http;\n    this.threadForm = _formBuilder.group({\n      // Define FormBuilder input validation rules\n      createdBy: ['', Validators.required],\n      threadTitle: ['', Validators.required],\n      threadBody: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    console.log(\"ThreadCreate from submitted:\");\n    console.log(this.threadForm);\n    console.log('The thread ' + this.threadForm.value.title + ' is created.');\n    console.log(this.threadForm.touched);\n    const newThread = this.threadForm.value; // Creates a Thread object with values from the form\n    const createUrl = \"api/thread/create\"; //navigates to the URL for creating new thread\n    this._threadService.createThread(newThread) //Send the new thread to ThreadService->ThreadController to save\n    .subscribe(response => {\n      if (response.success) {\n        // if the response is a sucsess a message is logged from the server\n        console.log(response.message);\n        this._router.navigate(['/threads']); // navigates back to /threads\n      } else {\n        // if it's not succesfull a failed success message is logged\n        console.log('Thread creation failed');\n      }\n    });\n  }\n  backToThreads() {\n    this._router.navigate(['/threads']); //navigates back to the threads\n  }\n}\n\nThreadformComponent.ɵfac = function ThreadformComponent_Factory(t) {\n  return new (t || ThreadformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ThreadService), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\nThreadformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadformComponent,\n  selectors: [[\"app-threads-threadform\"]],\n  decls: 22,\n  vars: 2,\n  consts: [[1, \"tabelLabel\", \"text-white\"], [1, \"form-box\"], [1, \"create-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [1, \"create-information\"], [\"for\", \"createdBy\"], [\"type\", \"text\", \"id\", \"createdBy\", \"formControlName\", \"createdBy\", 1, \"form-control\", \"username-input\"], [\"for\", \"threadTitle\"], [\"type\", \"text\", \"id\", \"threadTitle\", \"formControlName\", \"threadTitle\", 1, \"form-control\", \"title-input\"], [\"for\", \"threadBody\"], [\"type\", \"text\", \"id\", \"threadBody\", \"formControlName\", \"threadBody\", 1, \"form-control\", \"body-input\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function ThreadformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1, \"Create Thread\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function ThreadformComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 5)(15, \"label\", 10);\n      i0.ɵɵtext(16, \"Body:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"textarea\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"button\", 12);\n      i0.ɵɵtext(19, \"Create Thread\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function ThreadformComponent_Template_button_click_20_listener() {\n        return ctx.backToThreads();\n      });\n      i0.ɵɵtext(21, \"Cancel\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.threadForm);\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"disabled\", ctx.threadForm.invalid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".recent-posts-title[_ngcontent-%COMP%], .tabelLabel[_ngcontent-%COMP%] {\\r\\n  font-size: 40px;\\r\\n  text-align: center;\\r\\n  padding: 10px 0 30px 0;\\r\\n}\\r\\n\\r\\n.form-box[_ngcontent-%COMP%] {\\r\\n  height: 570px;\\r\\n  overflow: hidden;\\r\\n  margin: auto;\\r\\n  width: 50%;\\r\\n}\\r\\n\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  background-color: rgba(255, 255, 255, 0.9);\\r\\n  border-radius: 7px;\\r\\n  width: 100%;\\r\\n  padding: 20px;\\r\\n  border: none;\\r\\n  outline: none;\\r\\n  color: #002c45;\\r\\n  box-shadow: 3px 4px 5px 0px rgba(0, 0, 0, 0.38);\\r\\n  \\r\\n}\\r\\n\\r\\n  \\r\\n\\r\\n.create-container[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  transition: .5s ease-in-out;\\r\\n}\\r\\n\\r\\n.create-information[_ngcontent-%COMP%] {\\r\\n    margin-top: 5px;\\r\\n}\\r\\n\\r\\n.body-input[_ngcontent-%COMP%] {\\r\\n    height: 200px;\\r\\n}\\r\\n\\r\\n.username-input[_ngcontent-%COMP%], .title-input[_ngcontent-%COMP%], .body-input[_ngcontent-%COMP%] {\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  padding-top: 10px;\\r\\n  padding-bottom: 10px;\\r\\n  padding-left: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9jc3MvdGhyZWFkX3ZpZXcuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFDWixVQUFVO0FBQ1o7OztBQUdBO0VBQ0UsMENBQTBDO0VBQzFDLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsYUFBYTtFQUNiLFlBQVk7RUFDWixhQUFhO0VBQ2IsY0FBYztFQUNkLCtDQUErQztFQUMvQzsrQkFDNkI7QUFDL0I7O0VBRUU7Ozs7SUFJRTs7QUFFSjtFQUNFLFdBQVc7RUFDWCwyQkFBMkI7QUFDN0I7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtFQUNFLGdDQUFnQztFQUNoQyxpQkFBaUI7RUFDakIsb0JBQW9CO0VBQ3BCLGtCQUFrQjtBQUNwQiIsInNvdXJjZXNDb250ZW50IjpbIi5yZWNlbnQtcG9zdHMtdGl0bGUsIC50YWJlbExhYmVsIHtcclxuICBmb250LXNpemU6IDQwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDEwcHggMCAzMHB4IDA7XHJcbn1cclxuXHJcbi5mb3JtLWJveCB7XHJcbiAgaGVpZ2h0OiA1NzBweDtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIG1hcmdpbjogYXV0bztcclxuICB3aWR0aDogNTAlO1xyXG59XHJcblxyXG5cclxuLmZvcm0tZ3JvdXAge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcclxuICBib3JkZXItcmFkaXVzOiA3cHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZzogMjBweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgb3V0bGluZTogbm9uZTtcclxuICBjb2xvcjogIzAwMmM0NTtcclxuICBib3gtc2hhZG93OiAzcHggNHB4IDVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjM4KTtcclxuICAvKmN1cnNvcjogcG9pbnRlcjtcclxuICB0cmFuc2l0aW9uOiAuM3MgZWFzZS1pbi1vdXQ7Ki9cclxufVxyXG5cclxuICAvKi5mb3JtLWdyb3VwOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcclxuICAgIGJveC1zaGFkb3c6IDFweCA1cHggN3B4IDFweCByZ2JhKDAsIDAsIDAsIDAuMik7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgfSovXHJcblxyXG4uY3JlYXRlLWNvbnRhaW5lciB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgdHJhbnNpdGlvbjogLjVzIGVhc2UtaW4tb3V0O1xyXG59XHJcblxyXG4uY3JlYXRlLWluZm9ybWF0aW9uIHtcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxufVxyXG5cclxuLmJvZHktaW5wdXQge1xyXG4gICAgaGVpZ2h0OiAyMDBweDtcclxufVxyXG5cclxuLnVzZXJuYW1lLWlucHV0LCAudGl0bGUtaW5wdXQsIC5ib2R5LWlucHV0IHtcclxuICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAzcHggI2RkZDtcclxuICBwYWRkaW5nLXRvcDogMTBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcclxuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAoBA,UAAU,QAAqB,gBAAgB;;;;;;AAYnE,OAAM,MAAOC,mBAAmB;EAG9BC,YACUC,YAAyB,EACzBC,OAAe;EAAE;EACjBC,cAA6B,EAC7BC,KAAiB;IAHjB,iBAAY,GAAZH,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,mBAAc,GAAdC,cAAc;IACd,UAAK,GAALC,KAAK;IAEb,IAAI,CAACC,UAAU,GAAGJ,YAAY,CAACK,KAAK,CAAC;MACnC;MACAC,SAAS,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACpCC,WAAW,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACtCE,UAAU,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ;KAErC,CAAC;EACJ;EAGAG,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,UAAU,CAAC;IAC5BO,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACR,UAAU,CAACS,KAAK,CAACC,KAAK,GAAG,cAAc,CAAC;IACzEH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,UAAU,CAACW,OAAO,CAAC;IACpC,MAAMC,SAAS,GAAG,IAAI,CAACZ,UAAU,CAACS,KAAK,CAAC,CAAC;IACzC,MAAMI,SAAS,GAAG,mBAAmB,CAAC,CAAC;IACvC,IAAI,CAACf,cAAc,CAACgB,YAAY,CAACF,SAAS,CAAC,CAAC;IAAA,CACzCG,SAAS,CAACC,QAAQ,IAAG;MACtB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpB;QACAV,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAACrB,OAAO,CAACsB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAE;OACvC,MACI;QAAE;QACLZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;IAEzC,CAAC,CAAC;EACJ;EAEAY,aAAa;IACX,IAAI,CAACvB,OAAO,CAACsB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvC;;;AAzCWzB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCbhCC,6BAAkC;MAAAA,6BAAa;MAAAA,iBAAK;MAEpDA,8BAAsB;MAEaA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACpDD,8BAAwB;MAEGA,yBAAS;MAAAA,iBAAQ;MACtCA,2BAAoG;MACxGA,iBAAM;MACNA,+BAAgC;MACLA,uBAAM;MAAAA,iBAAQ;MACrCA,4BAAqG;MACzGA,iBAAM;MACNA,+BAAgC;MACNA,sBAAK;MAAAA,iBAAQ;MACnCA,gCAA8G;MAElHA,iBAAM;MAGRA,mCAA8E;MAAAA,8BAAa;MAAAA,iBAAS;MACpGA,mCAA4D;MAA1BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAlBvEA,eAAwB;MAAxBA,0CAAwB;MAiBkBA,gBAA+B;MAA/BA,iDAA+B","names":["Validators","ThreadformComponent","constructor","_formBuilder","_router","_threadService","_http","threadForm","group","createdBy","required","threadTitle","threadBody","onSubmit","console","log","value","title","touched","newThread","createUrl","createThread","subscribe","response","success","message","navigate","backToThreads","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threadform.component.ts","C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threadform.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ThreadService } from './threads.service';\r\nimport {Comment} from \"../comments/comments\";\r\n\r\n@Component({\r\n  selector: 'app-threads-threadform',\r\n  templateUrl: './threadform.component.html', // path to the HTML component\r\n  styleUrls: [/*'../../css/IndexStyle.css', '../../css/thread_table.css'*/'../../css/thread_view.css'],\r\n})\r\n\r\nexport class ThreadformComponent {\r\n  threadForm: FormGroup; // Initialise a FormGroup object\r\n\r\n  constructor(\r\n    private _formBuilder: FormBuilder,\r\n    private _router: Router, // Initialise router object for navigation\r\n    private _threadService: ThreadService,\r\n    private _http: HttpClient)\r\n  {\r\n    this.threadForm = _formBuilder.group({\r\n      // Define FormBuilder input validation rules\r\n      createdBy: ['', Validators.required],\r\n      threadTitle: ['', Validators.required],\r\n      threadBody: ['', Validators.required],\r\n\r\n    });\r\n  }\r\n\r\n\r\n  onSubmit() { // the method gets triggered when a thread is submitted\r\n    console.log(\"ThreadCreate from submitted:\");\r\n    console.log(this.threadForm);\r\n    console.log('The thread ' + this.threadForm.value.title + ' is created.');\r\n    console.log(this.threadForm.touched);\r\n    const newThread = this.threadForm.value; // Creates a Thread object with values from the form\r\n    const createUrl = \"api/thread/create\"; //navigates to the URL for creating new thread\r\n    this._threadService.createThread(newThread) //Send the new thread to ThreadService->ThreadController to save\r\n      .subscribe(response => {\r\n      if (response.success) {\r\n        // if the response is a sucsess a message is logged from the server\r\n        console.log(response.message);\r\n        this._router.navigate(['/threads']);  // navigates back to /threads\r\n      }\r\n      else { // if it's not succesfull a failed success message is logged\r\n        console.log('Thread creation failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  backToThreads() {\r\n    this._router.navigate(['/threads']); //navigates back to the threads\r\n  }\r\n}\r\n","<h2 class=\"tabelLabel text-white\">Create Thread</h2>\r\n\r\n<div class=\"form-box\">\r\n  <div class=\"create-container\">\r\n    <form [formGroup]=\"threadForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"form-group\">\r\n        <div class=\"create-information\">\r\n          <label for=\"createdBy\">Username:</label>\r\n            <input type=\"text\" id=\"createdBy\" formControlName=\"createdBy\" class=\"form-control username-input\" />\r\n        </div>\r\n        <div class=\"create-information\">\r\n          <label for=\"threadTitle\">Title:</label>\r\n            <input type=\"text\" id=\"threadTitle\" formControlName=\"threadTitle\" class=\"form-control title-input\" />\r\n        </div>\r\n        <div class=\"create-information\">\r\n          <label for=\"threadBody\">Body:</label>\r\n            <textarea type=\"text\" id=\"threadBody\" formControlName=\"threadBody\" class=\"form-control body-input\"></textarea>\r\n            \r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"threadForm.invalid\">Create Thread</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"backToThreads()\">Cancel</button>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
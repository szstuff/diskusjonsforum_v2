{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./threads.service\";\nimport * as i4 from \"@angular/common\";\nfunction ThreadViewComponent_div_3_div_1_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last edited: \", i0.ɵɵpipeBind2(3, 1, ctx_r7.thread.threadLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nconst _c0 = function () {\n  return [\"/threads\"];\n};\nfunction ThreadViewComponent_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"h1\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 10)(4, \"p\");\n    i0.ɵɵtext(5, \" Posted by \");\n    i0.ɵɵelementStart(6, \"b\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \" on the \");\n    i0.ɵɵelementStart(9, \"b\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \". \");\n    i0.ɵɵtemplate(13, ThreadViewComponent_div_3_div_1_span_13_Template, 4, 4, \"span\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"hr\");\n    i0.ɵɵelementStart(15, \"p\", 12);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\")(18, \"p\", 13);\n    i0.ɵɵelement(19, \"img\", 14);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_3_div_1_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.toggleEdit(ctx_r8.thread));\n    });\n    i0.ɵɵtext(22, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_3_div_1_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.deletePost(ctx_r10.thread));\n    });\n    i0.ɵɵtext(24, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.thread.threadTitle);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r4.thread.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 7, ctx_r4.thread.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.significantTimeDifference(ctx_r4.thread));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r4.thread.threadBody);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.thread.threadComments == null ? null : ctx_r4.thread.threadComments.length, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(10, _c0));\n  }\n}\nfunction ThreadViewComponent_div_3_ng_template_2_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last edited: \", i0.ɵɵpipeBind2(3, 1, ctx_r11.thread.threadLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nfunction ThreadViewComponent_div_3_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function ThreadViewComponent_div_3_ng_template_2_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.editedTitle = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"div\", 10)(2, \"p\");\n    i0.ɵɵtext(3, \" Posted by \");\n    i0.ɵɵelementStart(4, \"b\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" on the \");\n    i0.ɵɵelementStart(7, \"b\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \". \");\n    i0.ɵɵtemplate(11, ThreadViewComponent_div_3_ng_template_2_span_11_Template, 4, 4, \"span\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"hr\");\n    i0.ɵɵelementStart(13, \"textarea\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function ThreadViewComponent_div_3_ng_template_2_Template_textarea_ngModelChange_13_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.editedBody = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\")(15, \"p\", 13);\n    i0.ɵɵelement(16, \"img\", 14);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_3_ng_template_2_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.saveChanges());\n    });\n    i0.ɵɵtext(19, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_3_ng_template_2_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.toggleEdit(ctx_r16.thread));\n    });\n    i0.ɵɵtext(21, \"Cancel\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r6.editedTitle);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r6.thread.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 6, ctx_r6.thread.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.significantTimeDifference(ctx_r6.thread));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r6.editedBody);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.thread.threadComments == null ? null : ctx_r6.thread.threadComments.length, \"\");\n  }\n}\nfunction ThreadViewComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ThreadViewComponent_div_3_div_1_Template, 25, 11, \"div\", 6);\n    i0.ɵɵtemplate(2, ThreadViewComponent_div_3_ng_template_2_Template, 22, 9, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r5 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isEditing)(\"ngIfElse\", _r5);\n  }\n}\nfunction ThreadViewComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"p\");\n    i0.ɵɵtext(2, \"The requested thread was not found.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_6_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"b\");\n    i0.ɵɵtext(2, \"Maximum length exceeded (max 50 characters).\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_6_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"b\");\n    i0.ɵɵtext(2, \"Maximum length exceeded (max 1000 characters).\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_6_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"No comments yet.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ThreadViewComponent_div_6_div_13_div_1_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const comment_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\". Last edited at: \", i0.ɵɵpipeBind2(3, 1, comment_r21.commentLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nfunction ThreadViewComponent_div_6_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" replied on the \");\n    i0.ɵɵelementStart(5, \"b\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, ThreadViewComponent_div_6_div_13_div_1_ng_container_8_Template, 4, 4, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\")(12, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_6_div_13_div_1_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const comment_r21 = i0.ɵɵnextContext().$implicit;\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r27.toggleEditComment(comment_r21));\n    });\n    i0.ɵɵtext(13, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_6_div_13_div_1_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const comment_r21 = i0.ɵɵnextContext().$implicit;\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r30.deleteComment(comment_r21.commentId));\n    });\n    i0.ɵɵtext(15, \"Delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(16, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const comment_r21 = i0.ɵɵnextContext().$implicit;\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(comment_r21.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 4, comment_r21.commentCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.significantTimeDifference(comment_r21));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r21.commentBody);\n  }\n}\nfunction ThreadViewComponent_div_6_div_13_ng_template_2_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const comment_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\". Last edited at: \", i0.ɵɵpipeBind2(3, 1, comment_r21.commentLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nfunction ThreadViewComponent_div_6_div_13_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p\")(1, \"b\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" replied on the \");\n    i0.ɵɵelementStart(4, \"b\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ThreadViewComponent_div_6_div_13_ng_template_2_ng_container_7_Template, 4, 4, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"textarea\", 31);\n    i0.ɵɵlistener(\"ngModelChange\", function ThreadViewComponent_div_6_div_13_ng_template_2_Template_textarea_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r37);\n      const comment_r21 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(comment_r21.editedBody = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\")(10, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_6_div_13_ng_template_2_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r37);\n      const comment_r21 = i0.ɵɵnextContext().$implicit;\n      const ctx_r38 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r38.saveChangesComment(comment_r21, ctx_r38.editedBody));\n    });\n    i0.ɵɵtext(11, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_6_div_13_ng_template_2_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r37);\n      const comment_r21 = i0.ɵɵnextContext().$implicit;\n      const ctx_r40 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r40.toggleEditComment(comment_r21));\n    });\n    i0.ɵɵtext(13, \"Cancel\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(14, \"hr\");\n  }\n  if (rf & 2) {\n    const comment_r21 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r21.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 4, comment_r21.commentCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", comment_r21.commentLastEditedAt !== comment_r21.commentCreatedAt);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", comment_r21.editedBody);\n  }\n}\nfunction ThreadViewComponent_div_6_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ThreadViewComponent_div_6_div_13_div_1_Template, 17, 7, \"div\", 3);\n    i0.ɵɵtemplate(2, ThreadViewComponent_div_6_div_13_ng_template_2_Template, 15, 7, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const comment_r21 = ctx.$implicit;\n    const _r23 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !comment_r21.isEditing)(\"ngIfElse\", _r23);\n  }\n}\nfunction ThreadViewComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"h3\", 21);\n    i0.ɵɵtext(2, \"Comments\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 22)(4, \"input\", 23);\n    i0.ɵɵlistener(\"ngModelChange\", function ThreadViewComponent_div_6_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r44);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.newCommentCreatedBy = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, ThreadViewComponent_div_6_div_5_Template, 3, 0, \"div\", 24);\n    i0.ɵɵelementStart(6, \"textarea\", 25);\n    i0.ɵɵlistener(\"ngModelChange\", function ThreadViewComponent_div_6_Template_textarea_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r44);\n      const ctx_r45 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r45.newCommentBody = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ThreadViewComponent_div_6_div_7_Template, 3, 0, \"div\", 24);\n    i0.ɵɵelementStart(8, \"div\")(9, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function ThreadViewComponent_div_6_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r44);\n      const ctx_r46 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r46.addComment());\n    });\n    i0.ɵɵtext(10, \"Add Comment\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"div\", 27);\n    i0.ɵɵtemplate(12, ThreadViewComponent_div_6_div_12_Template, 3, 0, \"div\", 11);\n    i0.ɵɵtemplate(13, ThreadViewComponent_div_6_div_13_Template, 4, 2, \"div\", 28);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_3_0;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newCommentCreatedBy);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r3.threadView.get(\"newCommentCreatedBy\")) == null ? null : tmp_1_0.hasError(\"maxlength\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newCommentBody);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx_r3.threadView.get(\"newCommentBody\")) == null ? null : tmp_3_0.hasError(\"maxlength\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r3.threadView.invalid);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.thread.threadComments || ctx_r3.thread.threadComments.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.thread.threadComments);\n  }\n}\nexport class ThreadViewComponent {\n  constructor(_formBuilder, router, threadService) {\n    this._formBuilder = _formBuilder;\n    this.router = router;\n    this.threadService = threadService;\n    this.thread = {};\n    this.newCommentBody = '';\n    this.newCommentCreatedBy = '';\n    this.isEditing = false;\n    this.editedTitle = '';\n    this.editedBody = '';\n    this.unsubscribe$ = new Subject();\n    this.threadView = _formBuilder.group({\n      newCommentCreatedBy: ['', [Validators.required, Validators.maxLength(50)]],\n      newCommentBody: ['', [Validators.required, Validators.maxLength(1000)]]\n    });\n  }\n  // fetches the thread and the comments under the thread\n  ngOnInit() {\n    this.router.paramMap.pipe(takeUntil(this.unsubscribe$)).subscribe(params => {\n      const threadId = +params.get('id');\n      // fetches the thread by threadId\n      this.threadService.getThread(threadId).subscribe(thread => {\n        this.thread = thread;\n        // fetches the comment that belongs to the thread by threadId\n        this.threadService.getCommentsForThread(threadId).subscribe(comments => {\n          this.thread.threadComments = comments;\n        }, error => {\n          console.error('Error fetching comments', error);\n        });\n      }, error => {\n        console.error('Error fetching thread', error);\n      });\n    });\n  }\n  // makes a constructor that takes in several data for comment. It is used in the HTML \"thread-view.component.html\" to add the data from the input\n  addComment() {\n    const newComment = {\n      commentId: 0,\n      commentBody: this.newCommentBody,\n      commentCreatedAt: new Date(),\n      commentLastEditedAt: new Date(),\n      threadId: this.thread.threadId,\n      thread: null,\n      parentCommentId: null,\n      parentComment: null,\n      createdBy: this.newCommentCreatedBy,\n      childComments: []\n    };\n    this.threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(response => {\n      this.newCommentBody = '';\n      this.newCommentCreatedBy = '';\n      newComment.commentId = response.commentId;\n      this.thread.threadComments.push(newComment); //Adds new comment to local representation of thread (because the thread is already loaded and would otherwise need to be refreshed)\n    }, error => {\n      console.error('Error adding comment', error);\n    });\n  }\n  // deletes the thread by threadId\n  deletePost(thread) {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${thread.threadTitle}\"`);\n    if (confirmDelete) {\n      this.threadService.deleteThread(thread.threadId).subscribe(response => {\n        if (response.success) {\n          this.router.navigate(['/']); //Navigate to home page after deleting a thread.\n          console.log(response.message);\n        }\n      }, error => {\n        console.error('Error deleting item', error);\n      });\n    }\n  }\n  toggleEdit(thread) {\n    this.isEditing = !this.isEditing;\n    this.editedBody = thread.threadBody;\n    this.editedTitle = thread.threadTitle;\n  }\n  // saves the changes made on the thread.\n  saveChanges() {\n    // Perform the logic to save changes, update thread.title and thread.body\n    // Call the service method to update the thread\n    this.thread.threadTitle = this.editedTitle;\n    this.thread.threadBody = this.editedBody;\n    this.threadService.updateThread(this.thread).subscribe(response => {\n      console.log('Server response:', response);\n      // Update the thread with the response from the server\n      if (response.success) {\n        this.thread.threadLastEditedAt = response.updatedThread.threadLastEditedAt;\n        this.toggleEdit(this.thread);\n      } else {\n        console.error('Error updating thread. Server response:', response);\n      }\n    }, error => {\n      console.error('Error saving changes', error);\n    });\n  }\n  deleteComment(commentId) {\n    this.threadService.deleteComment(commentId).subscribe(() => {\n      console.log('Comment deleted');\n      // This ensure that the UI update gets updated after deletion\n      if (this.thread && this.thread.threadComments) {\n        this.thread.threadComments = this.thread.threadComments.filter(comment => comment.commentId !== commentId);\n      }\n    }, error => console.error('Error deleting comment', error));\n  }\n  toggleEditComment(comment) {\n    comment.isEditing = !comment.isEditing;\n    this.editedBody = comment.commentBody;\n  }\n  saveChangesComment(comment, editedBody) {\n    if (editedBody !== undefined && editedBody.length >= 1) {\n      comment.commentBody = editedBody;\n      this.threadService.updateComment(comment).subscribe(response => {\n        console.log(\"Comment has been updated\");\n        this.toggleEditComment(comment);\n      }, error => {\n        console.error('Error saving changes', error);\n      });\n    } else {\n      console.error('Attempted to save changes with undefined editedBody');\n    }\n  }\n  // LastEditedAt value is only displayed when time difference is over 1s (60*1000ms)\n  significantTimeDifference(object) {\n    let timeDiff;\n    if (\"threadCreatedAt\" in object) {\n      //If object contains threadCreatedAt field, it must be a thread.\n      timeDiff = new Date(object.threadLastEditedAt).getTime() - new Date(object.threadCreatedAt).getTime();\n    } else {\n      timeDiff = new Date(object.commentLastEditedAt).getTime() - new Date(object.commentCreatedAt).getTime();\n    }\n    return timeDiff > 60 * 1000;\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\nThreadViewComponent.ɵfac = function ThreadViewComponent_Factory(t) {\n  return new (t || ThreadViewComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ThreadService));\n};\nThreadViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ThreadViewComponent,\n  selectors: [[\"app-thread-view\"]],\n  decls: 7,\n  vars: 3,\n  consts: [[1, \"form-box\"], [1, \"create-container\"], [1, \"form-group\"], [4, \"ngIf\", \"ngIfElse\"], [\"notFound\", \"\"], [\"id\", \"displayComments\", 4, \"ngIf\"], [\"id\", \"displayPost\", 4, \"ngIf\", \"ngIfElse\"], [\"editMode\", \"\"], [\"id\", \"displayPost\"], [1, \"thread-title-current\"], [1, \"thread-information\"], [4, \"ngIf\"], [1, \"thread-body\"], [1, \"comment-count\"], [\"ngSrc\", \"../../assets/images/message-detail-regular-24.png\", \"alt\", \"...\", \"height\", \"20\", \"width\", \"20\"], [1, \"editBtn\", 3, \"click\"], [1, \"editBtn\", 3, \"routerLink\", \"click\"], [\"type\", \"text\", 1, \"editTitle\", 3, \"ngModel\", \"ngModelChange\"], [1, \"editBox\", 3, \"ngModel\", \"ngModelChange\"], [1, \"container\"], [\"id\", \"displayComments\"], [1, \"comments-header\"], [\"id\", \"textBox\"], [\"placeholder\", \"Display name\", 1, \"comment-input\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"error-form\", 4, \"ngIf\"], [\"placeholder\", \"What are your thoughts?\", 1, \"comment-input\", 3, \"ngModel\", \"ngModelChange\"], [1, \"add-comment-button\", 3, \"disabled\", \"click\"], [1, \"actual-comment\"], [4, \"ngFor\", \"ngForOf\"], [1, \"error-form\"], [1, \"commentBtn\", 3, \"click\"], [\"type\", \"text\", 1, \"comment-input\", 3, \"ngModel\", \"ngModelChange\"]],\n  template: function ThreadViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtemplate(3, ThreadViewComponent_div_3_Template, 4, 2, \"div\", 3);\n      i0.ɵɵtemplate(4, ThreadViewComponent_ng_template_4_Template, 3, 0, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(6, ThreadViewComponent_div_6_Template, 14, 7, \"div\", 5);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread.threadId)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel, i2.RouterLink, i4.NgOptimizedImage, i4.DatePipe],\n  styles: [\".recent-posts-title[_ngcontent-%COMP%], .tabelLabel[_ngcontent-%COMP%] {\\r\\n  font-size: 30px;\\r\\n  text-align: center;\\r\\n  padding: 50px 0 30px 0;\\r\\n}\\r\\n\\r\\n.form-box[_ngcontent-%COMP%] {\\r\\n  overflow: hidden;\\r\\n  margin: auto;\\r\\n  width: 50%;\\r\\n}\\r\\n\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  font-family: 'Ubuntu', sans-serif;\\r\\n  font-weight: 300;\\r\\n  font-size: 15px;\\r\\n  background-color: rgba(255, 255, 255, 0.9);\\r\\n  border-radius: 7px;\\r\\n  width: 100%;\\r\\n  padding: 30px;\\r\\n  border: none;\\r\\n  outline: none;\\r\\n  color: #002c45;\\r\\n  box-shadow: 3px 4px 5px 0px rgba(0, 0, 0, 0.38);\\r\\n}\\r\\n\\r\\n.create-container[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  transition: .5s ease-in-out;\\r\\n  padding: 15px;\\r\\n  color: #002c45;\\r\\n}\\r\\n\\r\\n.create-information[_ngcontent-%COMP%] {\\r\\n    margin-top: 5px;\\r\\n}\\r\\n\\r\\n.body-input[_ngcontent-%COMP%] {\\r\\n    height: 200px;\\r\\n}\\r\\n\\r\\n.username-input[_ngcontent-%COMP%], .title-input[_ngcontent-%COMP%], .body-input[_ngcontent-%COMP%], .comment-input[_ngcontent-%COMP%], .editBox[_ngcontent-%COMP%]{\\r\\n  font-family: 'Ubuntu', sans-serif;\\r\\n  font-weight: 300;\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  border: 1px solid #ccc;\\r\\n  padding-top: 10px;\\r\\n  padding-bottom: 10px;\\r\\n  padding-left: 20px;\\r\\n  padding-right: 20px;\\r\\n}\\r\\n\\r\\n.create-thread-buttons[_ngcontent-%COMP%] {\\r\\n    margin: auto;\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.create-button[_ngcontent-%COMP%] {\\r\\n  font-size: 17px;\\r\\n  font-weight: 700;\\r\\n  color: white;\\r\\n  height: 35px;\\r\\n  margin-top: 20px;\\r\\n  width: 30%;\\r\\n  border: none;\\r\\n  border-radius: 20px;\\r\\n  outline: none;\\r\\n  background-color: rgba(51, 153, 105, 0.9);\\r\\n  box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);\\r\\n  cursor: pointer;\\r\\n  transition: .3s ease-in-out;\\r\\n}\\r\\n\\r\\n  .create-button[_ngcontent-%COMP%]:hover {\\r\\n    background: rgb(51, 153, 105, 07);\\r\\n    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);\\r\\n  }\\r\\n\\r\\n.cancel-button[_ngcontent-%COMP%] {\\r\\n  font-size: 15px;\\r\\n  font-weight: 700;\\r\\n  color: white;\\r\\n  height: 35px;\\r\\n  margin-top: 20px;\\r\\n  margin-left: 20px;\\r\\n  width: 17%;\\r\\n  border: none;\\r\\n  border-radius: 20px;\\r\\n  outline: none;\\r\\n  background-color: rgba(150, 29, 29, 0.9);\\r\\n  box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);\\r\\n  cursor: pointer;\\r\\n  transition: .3s ease-in-out;\\r\\n}\\r\\n\\r\\n  .cancel-button[_ngcontent-%COMP%]:hover, .delete-thread-button[_ngcontent-%COMP%]{\\r\\n    background: rgb(150, 29, 29, 07);\\r\\n    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);\\r\\n  }\\r\\n\\r\\n.delete-thread-button[_ngcontent-%COMP%]{\\r\\n  font-size: 13px;\\r\\n  font-weight: 700;\\r\\n  color: white;\\r\\n  height: 30px;\\r\\n  margin-top: 7px;\\r\\n  margin-left: 2px;\\r\\n  margin-bottom: 20px;\\r\\n  width: 18%;\\r\\n  border: none;\\r\\n  border-radius: 7px;\\r\\n  outline: none;\\r\\n  background-color: rgb(150, 29, 29, 07);\\r\\n  box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.1);\\r\\n  cursor: pointer;\\r\\n  transition: .2s ease-out;\\r\\n}\\r\\n\\r\\n\\r\\n.input-label[_ngcontent-%COMP%] {\\r\\n  margin-left: 4px;\\r\\n  margin-bottom: 2px;\\r\\n}\\r\\n\\r\\n.add-comment-button[_ngcontent-%COMP%] {\\r\\n  font-size: 13px;\\r\\n  font-weight: 700;\\r\\n  color: white;\\r\\n  height: 30px;\\r\\n  margin-top: 7px;\\r\\n  margin-left: 2px;\\r\\n  margin-bottom: 20px;\\r\\n  width: 18%;\\r\\n  border: none;\\r\\n  border-radius: 7px;\\r\\n  outline: none;\\r\\n  background-color: rgba(51, 153, 105, 0.9);\\r\\n  box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.1);\\r\\n  cursor: pointer;\\r\\n  transition: .2s ease-out;\\r\\n}\\r\\n\\r\\n  .add-comment-button[_ngcontent-%COMP%]:hover {\\r\\n    background: rgb(51, 153, 105, 07);\\r\\n    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.2);\\r\\n  }\\r\\n\\r\\n.comment-input[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n#displayPost[_ngcontent-%COMP%] {\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  border-radius: 7px;\\r\\n  border: 1px solid #ccc;\\r\\n  padding: 20px 20px 0px 20px;\\r\\n  background-color: rgba(255, 255, 255, 0.8);\\r\\n}\\r\\n\\r\\n#displayComments[_ngcontent-%COMP%] {\\r\\n    margin: 25px 10px 25px;\\r\\n}\\r\\n\\r\\n.comment-count[_ngcontent-%COMP%] {\\r\\n    font-weight: 500;\\r\\n}\\r\\n\\r\\n.thread-title-current[_ngcontent-%COMP%] {\\r\\n    font-size: calc(0.1rem + 1.5vw);\\r\\n}\\r\\n\\r\\n.comments-header[_ngcontent-%COMP%] {\\r\\n    font-size: calc(0.7rem + .6vw);\\r\\n}\\r\\n\\r\\n.thread-body[_ngcontent-%COMP%] {\\r\\n    font-weight: 400;\\r\\n}\\r\\n\\r\\n.actual-comment[_ngcontent-%COMP%]{\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  border-radius: 7px;\\r\\n  border: 1px solid #ccc;\\r\\n  padding: 20px 20px 0px 20px;\\r\\n  background-color: rgba(255, 255, 255, 0.8);\\r\\n}\\r\\n.comment-input[_ngcontent-%COMP%]{\\r\\n  border-radius: 7px;\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  border: 1px solid #ccc;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.editBtn[_ngcontent-%COMP%] {\\r\\n  font-size: 13px;\\r\\n  font-weight: 700;\\r\\n  color: black;\\r\\n  height: 30px;\\r\\n  margin-top: 7px;\\r\\n  margin-right: 10px;\\r\\n  margin-bottom: 20px;\\r\\n  width: 11%;\\r\\n  border: 0.5px solid #e9ecef;\\r\\n  border-radius: 7px;\\r\\n  outline: none;\\r\\n  background: linear-gradient(160deg, #f8f9fa, #e9ecef);\\r\\n  box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.1);\\r\\n  cursor: pointer;\\r\\n  transition: .2s ease-out;\\r\\n}\\r\\n\\r\\n  .editBtn[_ngcontent-%COMP%]:hover {\\r\\n    background: linear-gradient(320deg, #f8f9fa, #e9ecef);\\r\\n    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.3);\\r\\n  }\\r\\n\\r\\n.editBox[_ngcontent-%COMP%] {\\r\\n  border-radius: 7px;\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  border: 1px solid #ccc;\\r\\n  margin-bottom: 5px;\\r\\n  padding-right: 70%;\\r\\n}\\r\\n\\r\\n.commentBtn[_ngcontent-%COMP%] {\\r\\n  font-size: 13px;\\r\\n  font-weight: 700;\\r\\n  color: black;\\r\\n  height: 30px;\\r\\n  margin-top: 7px;\\r\\n  margin-right: 10px;\\r\\n  margin-bottom: 20px;\\r\\n  width: 11%;\\r\\n  border: 0.5px solid #e9ecef;\\r\\n  border-radius: 7px;\\r\\n  outline: none;\\r\\n  background: linear-gradient(160deg, #f8f9fa, #e9ecef);\\r\\n  box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.1);\\r\\n  cursor: pointer;\\r\\n  transition: .2s ease-out;\\r\\n}\\r\\n\\r\\n  .commentBtn[_ngcontent-%COMP%]:hover {\\r\\n    background: linear-gradient(320deg, #f8f9fa, #e9ecef);\\r\\n    box-shadow: 1px 5px 7px 1px rgba(0, 0, 0, 0.3);\\r\\n  }\\r\\n\\r\\n.editTitle[_ngcontent-%COMP%]{\\r\\n  font-family: 'Ubuntu', sans-serif;\\r\\n  font-weight: 300;\\r\\n  box-shadow: inset 0 1px 3px #ddd;\\r\\n  border: 1px solid #ccc;\\r\\n  padding-top: 10px;\\r\\n  padding-bottom: 10px;\\r\\n  padding-left: 20px;\\r\\n  padding-right: 65%;\\r\\n  border-radius: 7px;\\r\\n}\\r\\n\\r\\n.error-form[_ngcontent-%COMP%] {\\r\\n  margin: 3px 0 0 5px;\\r\\n  color: rgba(150, 29, 29, 0.9);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"mappings":"AACA,SAAoBA,UAAU,QAAqB,gBAAgB;AAKnE,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,OAAO,QAAQ,MAAM;;;;;;;;ICOhBC,4BAAgD;IAC3CA,YAAuE;;IAAAA,iBAAI;;;;IAA3EA,eAAuE;IAAvEA,sHAAuE;;;;;;;;;IAVlFA,8BAAwD;IAErBA,YAAwB;IAAAA,iBAAK;IAE9DA,+BAAgC;IAG5BA,2BAAU;IAAAA,yBAAG;IAAAA,YAAsB;IAAAA,iBAAI;IAACA,wBAAO;IAAAA,yBAAG;IAAAA,aAAuD;;IAAAA,iBAAI;IAAAA,mBAC7G;IACAA,qFAEO;IACTA,iBAAI;IACJA,sBAAM;IACNA,8BAAuB;IAAAA,aAAuB;IAAAA,iBAAI;IAGpDA,4BAAK;IAAyBA,2BAAiG;IAC7HA,aAAmC;IAAAA,iBAAI;IAGzCA,mCAAqD;IAA7CA;MAAAA;MAAA;MAAA,OAASA,+CAAkB;IAAA,EAAC;IAAiBA,qBAAI;IAAAA,iBAAS;IAClEA,mCAAiF;IAAzEA;MAAAA;MAAA;MAAA,OAASA,iDAAkB;IAAA,EAAC;IAA6CA,uBAAM;IAAAA,iBAAS;;;;IApB/DA,eAAwB;IAAxBA,+CAAwB;IAKxCA,eAAsB;IAAtBA,6CAAsB;IAAeA,eAAuD;IAAvDA,8FAAuD;IAElGA,eAAuC;IAAvCA,sEAAuC;IAKzBA,eAAuB;IAAvBA,8CAAuB;IAI9CA,eAAmC;IAAnCA,iHAAmC;IAIAA,eAA2B;IAA3BA,wDAA2B;;;;;IAW5DA,4BAAkD;IAC7CA,YAAuE;;IAAAA,iBAAI;;;;IAA3EA,eAAuE;IAAvEA,uHAAuE;;;;;;IAPhFA,iCAAgE;IAA7CA;MAAAA;MAAA;MAAA;IAAA,EAAyB;IAA5CA,iBAAgE;IAChEA,+BAAgC;IAG5BA,2BAAU;IAAAA,yBAAG;IAAAA,YAAsB;IAAAA,iBAAI;IAACA,wBAAO;IAAAA,yBAAG;IAAAA,YAAuD;;IAAAA,iBAAI;IAAAA,mBAC7G;IACAA,6FAEO;IACTA,iBAAI;IACJA,sBAAM;IACNA,qCAAmD;IAAzCA;MAAAA;MAAA;MAAA;IAAA,EAAwB;IAAiBA,iBAAW;IAGhEA,4BAAK;IAAyBA,2BAAkG;IAC9HA,aAAmC;IAAAA,iBAAI;IAGzCA,mCAAgD;IAAxCA;MAAAA;MAAA;MAAA,OAASA,oCAAa;IAAA,EAAC;IAAiBA,qBAAI;IAAAA,iBAAS;IAC7DA,mCAAqD;IAA7CA;MAAAA;MAAA;MAAA,OAASA,iDAAkB;IAAA,EAAC;IAAiBA,uBAAM;IAAAA,iBAAS;;;;IAnBjDA,4CAAyB;IAI3BA,eAAsB;IAAtBA,6CAAsB;IAAeA,eAAuD;IAAvDA,6FAAuD;IAElGA,eAAyC;IAAzCA,sEAAyC;IAKxCA,eAAwB;IAAxBA,2CAAwB;IAIlCA,eAAmC;IAAnCA,iHAAmC;;;;;IA3CzCA,2BAA4C;IAC1CA,4EAuBM;IAENA,4HAsBc;IAChBA,iBAAM;;;;;IAhDEA,eAAkB;IAAlBA,wCAAkB;;;;;IAmDxBA,+BAAuB;IAClBA,mDAAmC;IAAAA,iBAAI;;;;;IAU1CA,+BAA6F;IACxFA,4DAA4C;IAAAA,iBAAI;;;;;IAGrDA,+BAAwF;IACnFA,8DAA8C;IAAAA,iBAAI;;;;;IASvDA,2BAA0E;IACrEA,gCAAgB;IAAAA,iBAAI;;;;;IASnBA,6BAA2D;IACzDA,yBAAG;IAAAA,YAA6E;;IAAAA,iBAAI;IACtFA,0BAAe;;;;IADVA,eAA6E;IAA7EA,0HAA6E;;;;;;IANtFA,2BAA+C;IAGxCA,YAAqB;IAAAA,iBAAI;IAACA,gCAAe;IAAAA,yBAAG;IAAAA,YAAsD;;IAAAA,iBAAI;IAEzGA,0GAEe;IACjBA,iBAAI;IACJA,yBAAG;IAAAA,aAAyB;IAAAA,iBAAI;IAEhCA,4BAAK;IACwBA;MAAAA;MAAA;MAAA;MAAA,OAASA,qDAA0B;IAAA,EAAC;IAACA,qBAAI;IAAAA,iBAAS;IAC7EA,mCAAsE;IAA3CA;MAAAA;MAAA;MAAA;MAAA,OAASA,2DAAgC;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;IAEvFA,sBAAI;IACNA,iBAAM;;;;;IAbCA,eAAqB;IAArBA,2CAAqB;IAAuBA,eAAsD;IAAtDA,4FAAsD;IAEtFA,eAA0C;IAA1CA,qEAA0C;IAIxDA,eAAyB;IAAzBA,6CAAyB;;;;;IAc1BA,6BAA+E;IAC7EA,yBAAG;IAAAA,YAA6E;;IAAAA,iBAAI;IACtFA,0BAAe;;;;IADVA,eAA6E;IAA7EA,0HAA6E;;;;;;IAJpFA,yBAAG;IACEA,YAAqB;IAAAA,iBAAI;IAACA,gCAAe;IAAAA,yBAAG;IAAAA,YAAsD;;IAAAA,iBAAI;IAEzGA,kHAEe;IACjBA,iBAAI;IACJA,oCAA6E;IAAjCA;MAAAA;MAAA;MAAA,OAAaA,+CAA0B;IAAA,EAAP;IAACA,iBAAW;IACxFA,2BAAK;IACwBA;MAAAA;MAAA;MAAA;MAAA,OAASA,0EAAuC;IAAA,EAAC;IAACA,qBAAI;IAAAA,iBAAS;IAC1FA,mCAAgE;IAArCA;MAAAA;MAAA;MAAA;MAAA,OAASA,qDAA0B;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;IAEjFA,sBAAI;;;;IAXCA,eAAqB;IAArBA,2CAAqB;IAAuBA,eAAsD;IAAtDA,4FAAsD;IAEtFA,eAA8D;IAA9DA,uFAA8D;IAInCA,eAAgC;IAAhCA,gDAAgC;;;;;IA5BhFA,2BAAmD;IACjDA,kFAgBM;IAENA,mIAec;IAChBA,iBAAM;;;;;IAlCEA,eAA0B;IAA1BA,6CAA0B;;;;;;IAzBtCA,+BAAyC;IACXA,wBAAQ;IAAAA,iBAAK;IAGzCA,+BAAkB;IACTA;MAAAA;MAAA;MAAA;IAAA,EAAiC;IAAxCA,iBAA0F;IAC1FA,2EAEM;IACNA,oCAAmG;IAAzFA;MAAAA;MAAA;MAAA;IAAA,EAA4B;IAA6DA,iBAAW;IAC9GA,2EAEM;IACNA,2BAAK;IACKA;MAAAA;MAAA;MAAA,OAASA,mCAAY;IAAA,EAAC;IAA4DA,4BAAW;IAAAA,iBAAS;IAKlHA,gCAA4B;IAC1BA,6EAEM;IAENA,6EAmCM;IACRA,iBAAM;;;;;;IAvDGA,eAAiC;IAAjCA,oDAAiC;IACfA,eAAkE;IAAlEA,8HAAkE;IAGjFA,eAA4B;IAA5BA,+CAA4B;IACbA,eAA6D;IAA7DA,yHAA6D;IAI1BA,eAA+B;IAA/BA,oDAA+B;IAMrFA,eAAkE;IAAlEA,iGAAkE;IAI/CA,eAAwB;IAAxBA,sDAAwB;;;ADvE3D,OAAM,MAAOC,mBAAmB;EAW9BC,YACUC,YAAyB,EACzBC,MAAsB,EACtBC,aAA4B;IAF5B,iBAAY,GAAZF,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,kBAAa,GAAbC,aAAa;IAbvB,WAAM,GAAW,EAAY;IAE7B,mBAAc,GAAW,EAAE;IAC3B,wBAAmB,GAAW,EAAE;IAChC,cAAS,GAAG,KAAK;IACjB,gBAAW,GAAW,EAAE;IACxB,eAAU,GAAW,EAAE;IAEf,iBAAY,GAAG,IAAIN,OAAO,EAAQ;IAQxC,IAAI,CAACO,UAAU,GAAGH,YAAY,CAACI,KAAK,CAAC;MACnCC,mBAAmB,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1EC,cAAc,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,IAAI,CAAC,CAAC;KAEvE,CAAC;EACJ;EAEA;EACAE,QAAQ;IACN,IAAI,CAACR,MAAM,CAACS,QAAQ,CAACC,IAAI,CACvBhB,SAAS,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC7B,CAACC,SAAS,CAACC,MAAM,IAAG;MACnB,MAAMC,QAAQ,GAAG,CAACD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAE;MACnC;MACA,IAAI,CAACd,aAAa,CAACe,SAAS,CAACF,QAAQ,CAAC,CAACF,SAAS,CAC7CK,MAAc,IAAI;QACjB,IAAI,CAACA,MAAM,GAAGA,MAAM;QACpB;QACA,IAAI,CAAChB,aAAa,CAACiB,oBAAoB,CAACJ,QAAQ,CAAC,CAACF,SAAS,CACxDO,QAAmB,IAAI;UACtB,IAAI,CAACF,MAAM,CAACG,cAAc,GAAGD,QAAQ;QACvC,CAAC,EACAE,KAAK,IAAI;UACRC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD,CAAC,CACF;MACH,CAAC,EACAA,KAAK,IAAI;QACRC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CACF;IACH,CAAC,CAAC;EACJ;EACA;EACAE,UAAU;IACR,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,IAAI,CAACnB,cAAc;MAChCoB,gBAAgB,EAAE,IAAIC,IAAI,EAAE;MAC5BC,mBAAmB,EAAC,IAAID,IAAI,EAAE;MAC9Bd,QAAQ,EAAE,IAAI,CAACG,MAAM,CAACH,QAAQ;MAC9BG,MAAM,EAAE,IAAI;MACZa,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE,IAAI;MACnBC,SAAS,EAAE,IAAI,CAAC5B,mBAAmB;MACnC6B,aAAa,EAAE;KAChB;IACD,IAAI,CAAChC,aAAa,CAACiC,kBAAkB,CAAC,IAAI,CAACjB,MAAM,CAACH,QAAQ,EAAEU,UAAU,CAAC,CAACZ,SAAS,CAC9EuB,QAAQ,IAAI;MACX,IAAI,CAAC5B,cAAc,GAAG,EAAE;MACxB,IAAI,CAACH,mBAAmB,GAAG,EAAE;MAC7BoB,UAAU,CAACC,SAAS,GAAGU,QAAQ,CAACV,SAAS;MACzC,IAAI,CAACR,MAAM,CAACG,cAAe,CAACgB,IAAI,CAACZ,UAAU,CAAC,CAAC,CAAC;IAGhD,CAAC,EACAH,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEA;EACAgB,UAAU,CAACpB,MAAc;IACvB,MAAMqB,aAAa,GAAGC,OAAO,CAAC,oCAAoCtB,MAAM,CAACuB,WAAW,GAAG,CAAC;IACxF,IAAIF,aAAa,EAAC;MAChB,IAAI,CAACrC,aAAa,CAACwC,YAAY,CAACxB,MAAM,CAACH,QAAQ,CAAC,CAACF,SAAS,CACvDuB,QAAQ,IAAI;QACX,IAAIA,QAAQ,CAACO,OAAO,EAAC;UACnB,IAAI,CAAC1C,MAAM,CAAC2C,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAC7BrB,OAAO,CAACsB,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC;;MAEjC,CAAC,EACDxB,KAAK,IAAG;QACNC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,CACF;;EAEL;EAEAyB,UAAU,CAAC7B,MAAc;IACvB,IAAI,CAAC8B,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;IAChC,IAAI,CAACC,UAAU,GAAG/B,MAAM,CAACgC,UAAU;IACnC,IAAI,CAACC,WAAW,GAAGjC,MAAM,CAACuB,WAAW;EAEvC;EAEA;EACAW,WAAW;IACT;IACA;IACA,IAAI,CAAClC,MAAM,CAACuB,WAAW,GAAG,IAAI,CAACU,WAAW;IAC1C,IAAI,CAACjC,MAAM,CAACgC,UAAU,GAAG,IAAI,CAACD,UAAU;IAExC,IAAI,CAAC/C,aAAa,CAACmD,YAAY,CAAC,IAAI,CAACnC,MAAM,CAAC,CAACL,SAAS,CACnDuB,QAAQ,IAAI;MACXb,OAAO,CAACsB,GAAG,CAAC,kBAAkB,EAAET,QAAQ,CAAC;MAEzC;MACA,IAAIA,QAAQ,CAACO,OAAO,EAAE;QACpB,IAAI,CAACzB,MAAM,CAACoC,kBAAkB,GAAGlB,QAAQ,CAACmB,aAAa,CAACD,kBAAkB;QAE1E,IAAI,CAACP,UAAU,CAAC,IAAI,CAAC7B,MAAM,CAAC;OAC7B,MAAM;QACLK,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEc,QAAQ,CAAC;;IAEtE,CAAC,EACAd,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAGAkC,aAAa,CAAC9B,SAAiB;IAC7B,IAAI,CAACxB,aAAa,CAACsD,aAAa,CAAC9B,SAAS,CAAC,CAACb,SAAS,CACnD,MAAK;MACHU,OAAO,CAACsB,GAAG,CAAC,iBAAiB,CAAC;MAE9B;MACA,IAAI,IAAI,CAAC3B,MAAM,IAAI,IAAI,CAACA,MAAM,CAACG,cAAc,EAAE;QAC7C,IAAI,CAACH,MAAM,CAACG,cAAc,GAAG,IAAI,CAACH,MAAM,CAACG,cAAc,CAACoC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAAChC,SAAS,KAAKA,SAAS,CAAC;;IAE9G,CAAC,EACAJ,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAC1D;EACH;EAEAqC,iBAAiB,CAACD,OAAgB;IAChCA,OAAO,CAACV,SAAS,GAAG,CAACU,OAAO,CAACV,SAAS;IACtC,IAAI,CAACC,UAAU,GAAGS,OAAO,CAAC/B,WAAW;EACvC;EAEAiC,kBAAkB,CAACF,OAAgB,EAAET,UAAkB;IACrD,IAAIA,UAAU,KAAKY,SAAS,IAAIZ,UAAU,CAACa,MAAM,IAAI,CAAC,EAAE;MACtDJ,OAAO,CAAC/B,WAAW,GAAGsB,UAAU;MAChC,IAAI,CAAC/C,aAAa,CAAC6D,aAAa,CAACL,OAAO,CAAC,CAAC7C,SAAS,CAChDuB,QAAQ,IAAI;QACXb,OAAO,CAACsB,GAAG,CAAC,0BAA0B,CAAC;QACvC,IAAI,CAACc,iBAAiB,CAACD,OAAO,CAAC;MACjC,CAAC,EACApC,KAAK,IAAI;QACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CACF;KACF,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,qDAAqD,CAAC;;EAExE;EAGA;EACA0C,yBAAyB,CAACC,MAAW;IACnC,IAAIC,QAAgB;IACpB,IAAI,iBAAiB,IAAID,MAAM,EAAE;MAAE;MAChCC,QAAQ,GAAG,IAAIrC,IAAI,CAACoC,MAAM,CAACX,kBAAkB,CAAC,CAACa,OAAO,EAAE,GAAG,IAAItC,IAAI,CAACoC,MAAM,CAACG,eAAe,CAAC,CAACD,OAAO,EAAE;KACvG,MAAM;MACJD,QAAQ,GAAG,IAAIrC,IAAI,CAACoC,MAAM,CAACnC,mBAAmB,CAAC,CAACqC,OAAO,EAAE,GAAG,IAAItC,IAAI,CAACoC,MAAM,CAACrC,gBAAgB,CAAC,CAACuC,OAAO,EAAE;;IAE1G,OAAOD,QAAQ,GAAI,EAAE,GAAC,IAAK;EAE7B;EAEAG,WAAW;IACT,IAAI,CAACzD,YAAY,CAAC0D,IAAI,EAAE;IACxB,IAAI,CAAC1D,YAAY,CAAC2D,QAAQ,EAAE;EAC9B;;AAvLWzE,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA0E;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdhC/E,8BAAsB;MAIhBA,oEAiDM;MAENA,qHAIc;MAEdA,qEA6DM;MACRA,iBAAM;;;;MAvHEA,eAAuB;MAAvBA,0CAAuB;MAyDFA,eAAY;MAAZA,iCAAY","names":["Validators","takeUntil","Subject","i0","ThreadViewComponent","constructor","_formBuilder","router","threadService","threadView","group","newCommentCreatedBy","required","maxLength","newCommentBody","ngOnInit","paramMap","pipe","unsubscribe$","subscribe","params","threadId","get","getThread","thread","getCommentsForThread","comments","threadComments","error","console","addComment","newComment","commentId","commentBody","commentCreatedAt","Date","commentLastEditedAt","parentCommentId","parentComment","createdBy","childComments","addCommentToThread","response","push","deletePost","confirmDelete","confirm","threadTitle","deleteThread","success","navigate","log","message","toggleEdit","isEditing","editedBody","threadBody","editedTitle","saveChanges","updateThread","threadLastEditedAt","updatedThread","deleteComment","filter","comment","toggleEditComment","saveChangesComment","undefined","length","updateComment","significantTimeDifference","object","timeDiff","getTime","threadCreatedAt","ngOnDestroy","next","complete","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.ts","C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ThreadService } from './threads.service';\r\nimport { Thread } from './threads';\r\nimport { Comment } from '../comments/comments';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-thread-view',\r\n  templateUrl: './thread-view.component.html',\r\n  styleUrls: ['../../css/thread_view.css']\r\n})\r\nexport class ThreadViewComponent implements OnInit, OnDestroy {\r\n  thread: Thread = {} as Thread;\r\n  threadView: FormGroup;\r\n  newCommentBody: string = '';\r\n  newCommentCreatedBy: string = '';\r\n  isEditing = false;\r\n  editedTitle: string = '';\r\n  editedBody: string = '';\r\n\r\n  private unsubscribe$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private _formBuilder: FormBuilder,\r\n    private router: ActivatedRoute,\r\n    private threadService: ThreadService\r\n  )\r\n  {\r\n    this.threadView = _formBuilder.group({\r\n      newCommentCreatedBy: ['', [Validators.required, Validators.maxLength(50)]],\r\n      newCommentBody: ['', [Validators.required, Validators.maxLength(1000)]],\r\n\r\n    });\r\n  }\r\n\r\n  // fetches the thread and the comments under the thread\r\n  ngOnInit(): void {\r\n    this.router.paramMap.pipe(\r\n      takeUntil(this.unsubscribe$)\r\n    ).subscribe(params => {\r\n      const threadId = +params.get('id')!;\r\n      // fetches the thread by threadId\r\n      this.threadService.getThread(threadId).subscribe(\r\n        (thread: Thread) => {\r\n          this.thread = thread;\r\n          // fetches the comment that belongs to the thread by threadId\r\n          this.threadService.getCommentsForThread(threadId).subscribe(\r\n            (comments: Comment[]) => {\r\n              this.thread.threadComments = comments;\r\n            },\r\n            (error) => {\r\n              console.error('Error fetching comments', error);\r\n            }\r\n          );\r\n        },\r\n        (error) => {\r\n          console.error('Error fetching thread', error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n  // makes a constructor that takes in several data for comment. It is used in the HTML \"thread-view.component.html\" to add the data from the input\r\n  addComment() {\r\n    const newComment = {\r\n      commentId: 0,\r\n      commentBody: this.newCommentBody,\r\n      commentCreatedAt: new Date(),\r\n      commentLastEditedAt:new Date(),\r\n      threadId: this.thread.threadId,\r\n      thread: null,\r\n      parentCommentId: null,\r\n      parentComment: null,\r\n      createdBy: this.newCommentCreatedBy,\r\n      childComments: [],\r\n    };\r\n    this.threadService.addCommentToThread(this.thread.threadId, newComment).subscribe(\r\n      (response) => {\r\n        this.newCommentBody = '';\r\n        this.newCommentCreatedBy = '';\r\n        newComment.commentId = response.commentId;\r\n        this.thread.threadComments!.push(newComment); //Adds new comment to local representation of thread (because the thread is already loaded and would otherwise need to be refreshed)\r\n\r\n\r\n      },\r\n      (error) => {\r\n        console.error('Error adding comment', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // deletes the thread by threadId\r\n  deletePost(thread: Thread){\r\n    const confirmDelete = confirm(`Are you sure you want to delete \"${thread.threadTitle}\"`);\r\n    if (confirmDelete){\r\n      this.threadService.deleteThread(thread.threadId).subscribe(\r\n        (response) => {\r\n          if (response.success){\r\n            this.router.navigate(['/']); //Navigate to home page after deleting a thread.\r\n            console.log(response.message);\r\n          }\r\n        },\r\n        error => {\r\n          console.error('Error deleting item', error)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  toggleEdit(thread: Thread) {\r\n    this.isEditing = !this.isEditing;\r\n    this.editedBody = thread.threadBody;\r\n    this.editedTitle = thread.threadTitle;\r\n\r\n  }\r\n\r\n  // saves the changes made on the thread.\r\n  saveChanges(): void {\r\n    // Perform the logic to save changes, update thread.title and thread.body\r\n    // Call the service method to update the thread\r\n    this.thread.threadTitle = this.editedTitle;\r\n    this.thread.threadBody = this.editedBody;\r\n\r\n    this.threadService.updateThread(this.thread).subscribe(\r\n      (response) => {\r\n        console.log('Server response:', response);\r\n\r\n        // Update the thread with the response from the server\r\n        if (response.success) {\r\n          this.thread.threadLastEditedAt = response.updatedThread.threadLastEditedAt;\r\n\r\n          this.toggleEdit(this.thread);\r\n        } else {\r\n          console.error('Error updating thread. Server response:', response);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error saving changes', error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  deleteComment(commentId: number): void {\r\n    this.threadService.deleteComment(commentId).subscribe(\r\n      () => {\r\n        console.log('Comment deleted');\r\n\r\n        // This ensure that the UI update gets updated after deletion\r\n        if (this.thread && this.thread.threadComments) {\r\n          this.thread.threadComments = this.thread.threadComments.filter(comment => comment.commentId !== commentId);\r\n        }\r\n      },\r\n      (error) => console.error('Error deleting comment', error)\r\n    );\r\n  }\r\n\r\n  toggleEditComment(comment: Comment): void {\r\n    comment.isEditing = !comment.isEditing;\r\n    this.editedBody = comment.commentBody;\r\n  }\r\n\r\n  saveChangesComment(comment: Comment, editedBody: string): void {\r\n    if (editedBody !== undefined && editedBody.length >= 1) {\r\n      comment.commentBody = editedBody;\r\n      this.threadService.updateComment(comment).subscribe(\r\n        (response) => {\r\n          console.log(\"Comment has been updated\");\r\n          this.toggleEditComment(comment);\r\n        },\r\n        (error) => {\r\n          console.error('Error saving changes', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Attempted to save changes with undefined editedBody');\r\n    }\r\n  }\r\n\r\n\r\n  // LastEditedAt value is only displayed when time difference is over 1s (60*1000ms)\r\n  significantTimeDifference(object: any): boolean {\r\n    let timeDiff: number;\r\n    if (\"threadCreatedAt\" in object) { //If object contains threadCreatedAt field, it must be a thread.\r\n       timeDiff = new Date(object.threadLastEditedAt).getTime() - new Date(object.threadCreatedAt).getTime();\r\n    } else {\r\n       timeDiff = new Date(object.commentLastEditedAt).getTime() - new Date(object.commentCreatedAt).getTime();\r\n    }\r\n    return timeDiff > (60*1000)\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n}\r\n","<div class=\"form-box\">\r\n  <div class=\"create-container\">\r\n    <div class=\"form-group\">\r\n\r\n      <div *ngIf=\"thread.threadId; else notFound\">\r\n        <div *ngIf=\"!isEditing; else editMode\" id=\"displayPost\">\r\n          <!-- Display content when not editing -->\r\n          <h1 class=\"thread-title-current\">{{ thread.threadTitle }}</h1>\r\n\r\n          <div class=\"thread-information\">\r\n            <!-- Thread information: user, post date, last edited date -->\r\n            <p>\r\n              Posted by <b>{{ thread.createdBy }}</b> on the <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>.\r\n              <!-- Display last edited date if different -->\r\n              <span *ngIf=\"significantTimeDifference(thread)\">\r\n                <i>Last edited: {{ thread.threadLastEditedAt | date: 'yyyy-MM-dd HH:mm' }}</i>\r\n              </span>\r\n            </p>\r\n            <hr />\r\n            <p class=\"thread-body\">{{ thread.threadBody }}</p>\r\n          </div>\r\n\r\n          <div><p class=\"comment-count\"><img ngSrc=\"../../assets/images/message-detail-regular-24.png\" alt=\"...\" height=\"20\" width=\"20\"/>\r\n            {{ thread.threadComments?.length }}</p>\r\n          </div>\r\n\r\n          <button (click)=\"toggleEdit(thread)\" class=\"editBtn\">Edit</button>\r\n          <button (click)=\"deletePost(thread)\" [routerLink]=\"['/threads']\" class=\"editBtn\">Delete</button>\r\n        </div>\r\n\r\n        <ng-template #editMode>\r\n          <!-- Display editable content when editing -->\r\n          <input type=\"text\" [(ngModel)]=\"editedTitle\" class=\"editTitle\"/>\r\n          <div class=\"thread-information\">\r\n            <!-- Thread information: user, post date, last edited date -->\r\n            <p>\r\n              Posted by <b>{{ thread.createdBy }}</b> on the <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>.\r\n              <!-- Display last edited date if different -->\r\n              <span *ngIf=\"(significantTimeDifference(thread))\">\r\n                <i>Last edited: {{ thread.threadLastEditedAt | date: 'yyyy-MM-dd HH:mm' }}</i>\r\n              </span>\r\n            </p>\r\n            <hr />\r\n            <textarea [(ngModel)]=\"editedBody\" class=\"editBox\"></textarea>\r\n          </div>\r\n\r\n          <div><p class=\"comment-count\"><img ngSrc=\"../../assets/images/message-detail-regular-24.png\" alt=\"...\" height=\"20\" width=\"20\" />\r\n            {{ thread.threadComments?.length }}</p>\r\n          </div>\r\n\r\n          <button (click)=\"saveChanges()\" class=\"editBtn\">Save</button>\r\n          <button (click)=\"toggleEdit(thread)\" class=\"editBtn\">Cancel</button>\r\n        </ng-template>\r\n      </div>\r\n\r\n      <ng-template #notFound>\r\n        <div class=\"container\">\r\n          <p>The requested thread was not found.</p>\r\n        </div>\r\n      </ng-template>\r\n\r\n      <div id=\"displayComments\" *ngIf=\"thread\">\r\n        <h3 class=\"comments-header\">Comments</h3>\r\n\r\n        <!-- Input box for adding comments -->\r\n        <div id=\"textBox\">\r\n          <input [(ngModel)]=\"newCommentCreatedBy\" placeholder=\"Display name\" class=\"comment-input\">\r\n          <div class=\"error-form\" *ngIf=\"threadView.get('newCommentCreatedBy')?.hasError('maxlength')\">\r\n            <b>Maximum length exceeded (max 50 characters).</b>\r\n          </div>\r\n          <textarea [(ngModel)]=\"newCommentBody\" placeholder=\"What are your thoughts?\" class=\"comment-input\"></textarea>\r\n          <div class=\"error-form\" *ngIf=\"threadView.get('newCommentBody')?.hasError('maxlength')\">\r\n            <b>Maximum length exceeded (max 1000 characters).</b>\r\n          </div>\r\n          <div>\r\n            <button (click)=\"addComment()\" class=\"add-comment-button\" [disabled]=\"threadView.invalid\">Add Comment</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Display existing comments -->\r\n        <div class=\"actual-comment\">\r\n          <div *ngIf=\"!thread.threadComments || thread.threadComments.length === 0\">\r\n            <p>No comments yet.</p>\r\n          </div>\r\n\r\n          <div *ngFor=\"let comment of thread.threadComments\">\r\n            <div *ngIf=\"!comment.isEditing; else editMode\">\r\n              <!-- Display content when not editing -->\r\n              <p>\r\n                <b>{{comment.createdBy}}</b> replied on the <b>{{comment.commentCreatedAt | date:'yyyy-MM-dd HH:mm'}}</b>\r\n                <!-- Displays commentLastEdited value only if it differs from commentCreatedAt        -->\r\n                <ng-container *ngIf=\"(significantTimeDifference(comment))\">\r\n                  <i>. Last edited at: {{ comment.commentLastEditedAt | date:'yyyy-MM-dd HH:mm' }}</i>\r\n                </ng-container>\r\n              </p>\r\n              <p>{{ comment.commentBody }}</p>\r\n\r\n              <div>\r\n                <button class=\"commentBtn\" (click)=\"toggleEditComment(comment)\">Edit</button>\r\n                <button class=\"commentBtn\" (click)=\"deleteComment(comment.commentId)\">Delete</button>\r\n              </div>\r\n              <hr>\r\n            </div>\r\n\r\n            <ng-template #editMode>\r\n              <!-- Display editable content when editing -->\r\n              <p>\r\n                <b>{{comment.createdBy}}</b> replied on the <b>{{comment.commentCreatedAt | date:'yyyy-MM-dd HH:mm'}}</b>\r\n                <!-- Displays commentLastEdited value only if it differs from commentCreatedAt        -->\r\n                <ng-container *ngIf=\"comment.commentLastEditedAt !== comment.commentCreatedAt\">\r\n                  <i>. Last edited at: {{ comment.commentLastEditedAt | date:'yyyy-MM-dd HH:mm' }}</i>\r\n                </ng-container>\r\n              </p>\r\n              <textarea class=\"comment-input\" type=\"text\" [(ngModel)]=\"comment.editedBody\"></textarea>\r\n              <div>\r\n                <button class=\"commentBtn\" (click)=\"saveChangesComment(comment, editedBody)\">Save</button>\r\n                <button class=\"commentBtn\" (click)=\"toggleEditComment(comment)\">Cancel</button>\r\n              </div>\r\n              <hr>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
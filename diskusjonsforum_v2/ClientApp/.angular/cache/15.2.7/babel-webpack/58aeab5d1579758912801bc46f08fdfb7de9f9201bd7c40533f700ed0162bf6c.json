{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./comments.service\";\nimport * as i4 from \"@angular/common/http\";\nexport class CommentformComponent {\n  constructor(_formBuilder,\n  //the form for creating a comment\n  _router,\n  //lets us nagivate to different routers within the angular application\n  _route,\n  //informs about the route activated\n  _commentService,\n  //encapsulate functionality linked to CommentService\n  _http // sends HTTP requests and receives HTTP responses\n  ) {\n    this._formBuilder = _formBuilder;\n    this._router = _router;\n    this._route = _route;\n    this._commentService = _commentService;\n    this._http = _http;\n    this.parentCommentId = 0;\n  }\n  ngOnInit() {\n    this.parentCommentId = this.parentCommentId || 0;\n    this.createForm();\n    this._route.queryParams.subscribe(params => {\n      this.commentId = params['commentId'] ? +params['commentId'] : undefined;\n    });\n  }\n  createForm() {\n    this.commentForm = this._formBuilder.group({\n      commentBody: ['', Validators.required],\n      createdBy: ['', Validators.required],\n      threadId: [this.threadId],\n      parentCommentId: [this.parentCommentId]\n    });\n  }\n  onSubmit() {\n    console.log(\"CommentCreate form submitted:\"); //Logs that the comment form is being submitted\n    console.log(this.commentForm); //Logs the commentForm object also controls and their current values\n    console.log('Touched: ', this.commentForm.touched); //Logs if the commentForm control has been touched or not\n    const newComment = this.commentForm.value; //Gets the current values of the commentForm control\n    if (this.commentId !== undefined) {\n      //checks if commentId is undefined\n      newComment.commentId = this.commentId; //if it is undefined CommentId is added to the object newComment\n    }\n\n    const createUrl = \"api/comment/create\"; //navigates to the URL for creating new comment\n    this._commentService.createComment(newComment).subscribe(response => {\n      if (response.success) {\n        //check if the post request is successful\n        console.log(response.message); //Logs a success message if the post request is successful\n        this._router.navigate([\"/comments\"]);\n      } else {\n        console.log(\"Comment failed\"); //if not successfull a a failed success message is logged\n      }\n    }, error => {\n      console.error(\"Error creating comment:\", error);\n    });\n  }\n  backToThreads() {\n    this._router.navigate([\"/threads\"]); //navigates back to the thread\n  }\n}\n\nCommentformComponent.ɵfac = function CommentformComponent_Factory(t) {\n  return new (t || CommentformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.CommentsService), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\nCommentformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CommentformComponent,\n  selectors: [[\"app-comments-commentform\"]],\n  inputs: {\n    threadId: \"threadId\",\n    parentCommentId: \"parentCommentId\"\n  },\n  decls: 17,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"hidden\", \"id\", \"threadId\", \"formControlName\", \"threadId\"], [\"type\", \"hidden\", \"id\", \"parentCommentId\", \"formControlName\", \"parentCommentId\"], [1, \"form-group\"], [\"for\", \"commentBody\"], [\"type\", \"text\", \"id\", \"commentBody\", \"formControlName\", \"commentBody\", 1, \"form-control\"], [\"for\", \"createdBy\"], [\"type\", \"text\", \"id\", \"createdBy\", \"formControlName\", \"createdBy\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function CommentformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Make a Comment\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CommentformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelement(3, \"input\", 1)(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Comment Body:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Created By:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 8);\n      i0.ɵɵtext(14, \"Create Comment\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function CommentformComponent_Template_button_click_15_listener() {\n        return ctx.backToThreads();\n      });\n      i0.ɵɵtext(16, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.commentForm);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"disabled\", ctx.commentForm.invalid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","CommentformComponent","constructor","_formBuilder","_router","_route","_commentService","_http","ngOnInit","parentCommentId","createForm","queryParams","subscribe","params","commentId","undefined","commentForm","group","commentBody","required","createdBy","threadId","onSubmit","console","log","touched","newComment","value","createUrl","createComment","response","success","message","navigate","error","backToThreads","selectors","inputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\comments\\commentform.component.ts","C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\comments\\commentform.component.html"],"sourcesContent":["import {Component, Input, OnInit} from \"@angular/core\";\r\nimport {FormGroup, Validators, FormBuilder} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport { CommentsService} from \"./comments.service\";\r\n@Component({\r\n  selector: \"app-comments-commentform\", //custom html tag\r\n  templateUrl: \"./commentform.component.html\" //path to the HTML file structure\r\n})\r\n\r\nexport class CommentformComponent implements OnInit{\r\n  @Input() threadId!: number;\r\n  @Input() parentCommentId: number = 0;\r\n  commentForm!: FormGroup;\r\n  commentId: number | undefined; //identifier for comment\r\n\r\n  constructor(\r\n    private _formBuilder: FormBuilder, //the form for creating a comment\r\n    private _router: Router, //lets us nagivate to different routers within the angular application\r\n    private _route: ActivatedRoute, //informs about the route activated\r\n    private _commentService: CommentsService, //encapsulate functionality linked to CommentService\r\n    private _http: HttpClient // sends HTTP requests and receives HTTP responses\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.parentCommentId = this.parentCommentId || 0;\r\n    this.createForm();\r\n    this._route.queryParams.subscribe(params => {\r\n      this.commentId = params['commentId'] ? +params['commentId'] : undefined;\r\n    });\r\n  }\r\n\r\n\r\n  createForm(): void{\r\n    this.commentForm = this._formBuilder.group({\r\n      commentBody: ['', Validators.required],\r\n      createdBy: ['', Validators.required],\r\n      threadId: [this.threadId],\r\n      parentCommentId: [this.parentCommentId]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"CommentCreate form submitted:\"); //Logs that the comment form is being submitted\r\n    console.log(this.commentForm); //Logs the commentForm object also controls and their current values\r\n    console.log('Touched: ', this.commentForm.touched); //Logs if the commentForm control has been touched or not\r\n\r\n    const newComment = this.commentForm.value; //Gets the current values of the commentForm control\r\n\r\n    if (this.commentId !== undefined){ //checks if commentId is undefined\r\n      newComment.commentId = this.commentId; //if it is undefined CommentId is added to the object newComment\r\n    }\r\n    const createUrl = \"api/comment/create\"; //navigates to the URL for creating new comment\r\n    this._commentService.createComment(newComment).subscribe(response => { //makes http post request with the data from newComment\r\n      if (response.success){ //check if the post request is successful\r\n        console.log(response.message); //Logs a success message if the post request is successful\r\n        this._router.navigate([\"/comments\"]);\r\n      }\r\n      else {\r\n        console.log(\"Comment failed\"); //if not successfull a a failed success message is logged\r\n      }\r\n      },\r\n      (error) => {\r\n        console.error(\"Error creating comment:\", error);\r\n      }\r\n    );\r\n  }\r\n  backToThreads(){\r\n    this._router.navigate([\"/threads\"]); //navigates back to the thread\r\n  }\r\n\r\n}\r\n","<!DOCTYPE html>\r\n<h2>Make a Comment</h2>\r\n\r\n<form [formGroup]=\"commentForm\" (ngSubmit)=\"onSubmit()\">\r\n  <input type=\"hidden\" id=\"threadId\" formControlName=\"threadId\" />\r\n  <input type=\"hidden\" id=\"parentCommentId\" formControlName=\"parentCommentId\" />\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"commentBody\">Comment Body:</label>\r\n    <input type=\"text\" id=\"commentBody\" formControlName=\"commentBody\" class=\"form-control\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"createdBy\">Created By:</label>\r\n    <input type=\"text\" id=\"createdBy\" formControlName=\"createdBy\" class=\"form-control\" />\r\n  </div>\r\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"commentForm.invalid\">Create Comment</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"backToThreads()\">Cancel</button>\r\n\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
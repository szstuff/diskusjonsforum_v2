{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./comments.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CommentsComponent_tr_3_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const childComment_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Created at \", childComment_r4.commentCreatedAt, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(childComment_r4.commentBody);\n  }\n}\nfunction CommentsComponent_tr_3_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 5);\n    i0.ɵɵtemplate(2, CommentsComponent_tr_3_div_9_div_2_Template, 5, 2, \"div\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const comment_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", comment_r1.childComments);\n  }\n}\nfunction CommentsComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_tr_3_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const comment_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.editComment(comment_r1.commentId));\n    });\n    i0.ɵɵtext(6, \"Edit Comment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_tr_3_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const comment_r1 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.deleteComment(comment_r1.commentId));\n    });\n    i0.ɵɵtext(8, \"Delete Comment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CommentsComponent_tr_3_div_9_Template, 3, 1, \"div\", 4);\n    i0.ɵɵelementStart(10, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_tr_3_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const comment_r1 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.navigateToCommentform(comment_r1));\n    });\n    i0.ɵɵtext(11, \"Create New Thread\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const comment_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Created at \", comment_r1.commentCreatedAt, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r1.commentBody);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", comment_r1.childComments && comment_r1.childComments.length > 0);\n  }\n}\nexport class CommentsComponent {\n  // initialises routes and service for the constructor\n  constructor(commentsService, _http, _router, route, _commentService) {\n    this.commentsService = commentsService;\n    this._http = _http;\n    this._router = _router;\n    this.route = route;\n    this._commentService = _commentService;\n    this.viewTitle = \"Table\";\n    this.comments = [];\n  }\n  //gets the comments using HttpClient from \"api/comments\"\n  getComments() {\n    this._http.get('api/comments').subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.comments = data;\n    }, error => {\n      console.error('Error getting comments', error);\n      // Handle the error, e.g., display an error message to the user\n      // For now, let's log a generic error message to the console\n      console.error('An error occurred while fetching comments. Please try again later.');\n    });\n  }\n  // retrieves the comments that belongs to the thread by threadId with an if statement\n  getCommentsByThread() {\n    if (this.parentThreadId !== undefined && this.parentThreadId !== null) {\n      this.commentsService.getCommentsByThreadId(this.parentThreadId).subscribe(comments => this.comments = comments, error => console.error('Error fetching comments'));\n    } else {\n      // if the parentThreadId is null or not defined the error is handled and the errormessage is logged to the console\n      console.error('Cannot fetch comments, parentThreadId is undefined.');\n    }\n  }\n  // gives the comment an commentId and sets parentThreadID to the thread it belongs to\n  navigateToCommentform(comment) {\n    const navigationExtras = {\n      queryParams: {\n        commentId: comment ? comment.commentId.toString() : undefined,\n        parentThreadId: this.parentThreadId.toString()\n      }\n    };\n    // navigates to /commentForm and specified nagivationExtras\n    this._router.navigate(['/commentForm'], navigationExtras);\n  }\n  ngOnInit() {\n    console.log('CommentsComponent created');\n    this.getComments();\n    //Routing for getCommentsByThread, fungerer ikke\n    /*\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.parentThreadId = + params.get('parentThreadId');\r\n      this.getCommentsByThread();\r\n    });\r\n    */\n  }\n  // Function to add a comment\n  addComment() {\n    // Logic to add a comment\n  }\n  // Function to edit a comment\n  editComment(commentId) {\n    // Logic to edit a comment\n  }\n  // Function to delete a comment\n  deleteComment(comment) {\n    const confirmDelete = confirm(`Are you sure you want to delete the comment`);\n    if (confirmDelete) {\n      this._commentService.deleteComment(comment.commentId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message(\"successfuly  deleted\"));\n        }\n      }, error => {\n        console.error(\"Error deleting comment\", error);\n      });\n    }\n  }\n}\nCommentsComponent.ɵfac = function CommentsComponent_Factory(t) {\n  return new (t || CommentsComponent)(i0.ɵɵdirectiveInject(i1.CommentsService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i1.CommentsService));\n};\nCommentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CommentsComponent,\n  selectors: [[\"app-comment-component\"]],\n  decls: 6,\n  vars: 1,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [3, \"click\"], [4, \"ngIf\"], [1, \"child-comments\"], [\"class\", \"comment-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"comment-item\"]],\n  template: function CommentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1, \"List of Comments\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"table\");\n      i0.ɵɵtemplate(3, CommentsComponent_tr_3_Template, 12, 3, \"tr\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function CommentsComponent_Template_button_click_4_listener() {\n        return ctx.navigateToCommentform();\n      });\n      i0.ɵɵtext(5, \"Create New Thread\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.comments);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","CommentsComponent","constructor","commentsService","_http","_router","route","_commentService","getComments","get","subscribe","data","console","log","JSON","stringify","comments","error","getCommentsByThread","parentThreadId","undefined","getCommentsByThreadId","navigateToCommentform","comment","navigationExtras","queryParams","commentId","toString","navigate","ngOnInit","addComment","editComment","deleteComment","confirmDelete","confirm","response","success","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\comments\\comments.component.html","C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\comments\\comments.component.ts"],"sourcesContent":["<!DOCTYPE html>\r\n<h2 id=\"tableLabel\">List of Comments</h2>\r\n\r\n<table>\r\n  <tr *ngFor=\"let comment of comments\">\r\n    <td>Created at {{ comment.commentCreatedAt }}</td>\r\n    <td>{{ comment.commentBody }}</td>\r\n     <button (click)=\"editComment(comment.commentId)\">Edit Comment</button>\r\n      <button (click)=\"deleteComment(comment.commentId)\">Delete Comment</button>\r\n\r\n    <div *ngIf=\"comment.childComments && comment.childComments.length > 0\">\r\n      <div class=\"child-comments\">\r\n        <div *ngFor=\"let childComment of comment.childComments\" class=\"comment-item\">\r\n          <p>Created at {{ childComment.commentCreatedAt }}</p>\r\n          <p>{{ childComment.commentBody }}</p>\r\n\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    <!-- Button Inside the Loop (Create New Thread for Each Comment) -->\r\n    <button class=\"btn btn-primary\" (click)=\"navigateToCommentform(comment)\">Create New Thread</button>\r\n  </tr>\r\n</table>\r\n\r\n<!-- Single Button for Creating a New Thread (Outside the Loop) -->\r\n<button class=\"btn btn-primary\" (click)=\"navigateToCommentform()\">Create New Thread</button>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Comment } from './comments';\r\nimport {CommentsService} from \"./comments.service\";\r\nimport {ActivatedRoute, NavigationExtras, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-comment-component', // custom HTML tag\r\n  templateUrl: './comments.component.html', //path to the HTML file structure\r\n  // styleUrls: ['./comment.component.css']\r\n})\r\n\r\nexport class CommentsComponent implements OnInit {\r\n  viewTitle: string = \"Table\";\r\n  comments: Comment[] = [];\r\n  parentThreadId!: number;\r\n // initialises routes and service for the constructor\r\n  constructor(\r\n      private commentsService : CommentsService,\r\n      private _http: HttpClient,\r\n      private _router: Router,\r\n      private route: ActivatedRoute,\r\n      private _commentService: CommentsService) {}\r\n\r\n  //gets the comments using HttpClient from \"api/comments\"\r\n  getComments(): void{\r\n    this._http.get<Comment[]>('api/comments').subscribe(data => {\r\n      console.log('All', JSON.stringify(data));\r\n      this.comments = data;\r\n      },\r\n      (error) => {\r\n        console.error('Error getting comments', error);\r\n        // Handle the error, e.g., display an error message to the user\r\n        // For now, let's log a generic error message to the console\r\n        console.error('An error occurred while fetching comments. Please try again later.')\r\n    });\r\n  }\r\n  // retrieves the comments that belongs to the thread by threadId with an if statement\r\n  getCommentsByThread(): void{\r\n    if (this.parentThreadId !== undefined && this.parentThreadId !== null) {\r\n      this.commentsService.getCommentsByThreadId(this.parentThreadId).subscribe(\r\n        (comments) => (this.comments = comments),\r\n        (error) => console.error('Error fetching comments')\r\n      )\r\n    } else {\r\n      // if the parentThreadId is null or not defined the error is handled and the errormessage is logged to the console\r\n      console.error('Cannot fetch comments, parentThreadId is undefined.')\r\n    }\r\n  }\r\n  // gives the comment an commentId and sets parentThreadID to the thread it belongs to\r\n  navigateToCommentform(comment?: Comment) {\r\n    const navigationExtras: NavigationExtras = {\r\n      queryParams: {\r\n        commentId: comment ? comment.commentId.toString() : undefined,\r\n        parentThreadId: this.parentThreadId.toString()\r\n      }\r\n    };\r\n    // navigates to /commentForm and specified nagivationExtras\r\n    this._router.navigate(['/commentForm'], navigationExtras);\r\n  }\r\n  ngOnInit(): void {\r\n    console.log('CommentsComponent created');\r\n    this.getComments();\r\n\r\n    //Routing for getCommentsByThread, fungerer ikke\r\n    /*\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.parentThreadId = + params.get('parentThreadId');\r\n      this.getCommentsByThread();\r\n    });\r\n    */\r\n\r\n\r\n  }\r\n\r\n  // Function to add a comment\r\n  addComment() {\r\n    // Logic to add a comment\r\n  }\r\n\r\n  // Function to edit a comment\r\n  editComment(commentId: number) {\r\n    // Logic to edit a comment\r\n  }\r\n\r\n  // Function to delete a comment\r\n\r\n   deleteComment(comment: Comment){\r\n     const confirmDelete = confirm(`Are you sure you want to delete the comment`);\r\n     if(confirmDelete){\r\n       this._commentService.deleteComment(comment.commentId).subscribe(\r\n         (response)=> {\r\n           if (response.success){\r\n             console.log(response.message(\"successfuly  deleted\"))\r\n           }\r\n         },\r\n         error => {\r\n           console.error(\"Error deleting comment\", error)\r\n         }\r\n       )\r\n     }\r\n\r\n   }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
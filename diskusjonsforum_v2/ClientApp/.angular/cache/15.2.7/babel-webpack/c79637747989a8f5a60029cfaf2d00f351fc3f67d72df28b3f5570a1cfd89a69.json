{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ThreadsComponent = class ThreadsComponent {\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log('In setter:', value);\n    this.filteredThreads = this.performFilter(value);\n  }\n  constructor(_threadService, _http, _router) {\n    this._threadService = _threadService;\n    this._http = _http;\n    this._router = _router;\n    this.viewTitle = 'Table';\n    this.threads = [];\n    this._listFilter = '';\n    this.filteredThreads = this.threads;\n  }\n  // function for retrieving  threads\n  getThreads() {\n    this._threadService.getThreadsByRecent() // Use a method that retrieves threads sorted by date\n    .subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.threads = data;\n      this.loadCommentsForThreads(); // Load comments for the threads\n    }, error => {\n      console.error('Error getting threads', error);\n      console.error('An error occurred while fetching threads. Please try again later.');\n    });\n  }\n  // function for loading comments belonging to a thread by threadId\n  loadCommentsForThreads() {\n    this.threads.forEach(thread => {\n      this._threadService.getCommentsForThread(thread.threadId).subscribe(comments => {\n        thread.threadComments = comments;\n      }, error => {\n        console.error(`Error fetching comments for thread ${thread.threadId}`, error);\n      });\n    });\n    // Update filteredThreads after loading comments\n    this.filteredThreads = this.performFilter(this.listFilter);\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.threads.filter(thread => thread.threadTitle.toLocaleLowerCase().includes(filterBy));\n  }\n  // navigates to the thread from when creating a new thread\n  navigateToThreadform() {\n    this._router.navigate(['/threadForm']);\n  }\n  // changes grid view for how the threads in the index\n  navigateToHome() {\n    this._router.navigate(['/home']);\n  }\n  ngOnInit() {\n    console.log('ThreadsComponent created');\n    this.getThreads();\n  }\n  // updates the thread\n  update(thread) {\n    this._threadService.updateThread(thread).subscribe(() => {\n      console.log('Thread updated');\n      this.getThreads();\n    }, error => {\n      console.error('Error updating thread', error);\n    });\n  }\n  // deletes the thread by threadId\n  delete(threadId) {\n    this._threadService.deleteThread(threadId).subscribe(() => {\n      console.log('Thread deleted');\n      this.getThreads();\n    }, error => {\n      console.error('Error deleting thread', error);\n    });\n  }\n};\nThreadsComponent = __decorate([Component({\n  selector: 'app-thread-component',\n  templateUrl: './threads.component.html',\n  styleUrls: ['../../css/IndexStyle.css', '../../css/thread_table.css']\n})], ThreadsComponent);\nexport { ThreadsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAY1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3B,IAAIC,UAAU;IACZ,OAAO,IAAI,CAACC,WAAW;EACzB;EAGA,IAAID,UAAU,CAACE,KAAa;IAC1B,IAAI,CAACD,WAAW,GAAGC,KAAK;IACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;IAChC,IAAI,CAACG,eAAe,GAAG,IAAI,CAACC,aAAa,CAACJ,KAAK,CAAC;EAClD;EAIAK,YACUC,cAA6B,EAC9BC,KAAiB,EAChBC,OAAe;IAFf,mBAAc,GAAdF,cAAc;IACf,UAAK,GAALC,KAAK;IACJ,YAAO,GAAPC,OAAO;IApBjB,cAAS,GAAW,OAAO;IAC3B,YAAO,GAAa,EAAE;IACd,gBAAW,GAAW,EAAE;IAahC,oBAAe,GAAa,IAAI,CAACC,OAAO;EAMpC;EAEJ;EACAC,UAAU;IACR,IAAI,CAACJ,cAAc,CAACK,kBAAkB,EAAE,CAAC;IAAA,CACtCC,SAAS,CAACC,IAAI,IAAG;MAChBZ,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEY,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;MACxC,IAAI,CAACJ,OAAO,GAAGI,IAAI;MACnB,IAAI,CAACG,sBAAsB,EAAE,CAAC,CAAC;IACjC,CAAC,EACEC,KAAK,IAAI;MACRhB,OAAO,CAACgB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7ChB,OAAO,CAACgB,KAAK,CAAC,mEAAmE,CAAC;IACpF,CAAC,CAAC;EACR;EAEA;EACQD,sBAAsB;IAC5B,IAAI,CAACP,OAAO,CAACS,OAAO,CAAEC,MAAM,IAAI;MAC9B,IAAI,CAACb,cAAc,CAACc,oBAAoB,CAACD,MAAM,CAACE,QAAQ,CAAC,CAACT,SAAS,CAChEU,QAAQ,IAAI;QACXH,MAAM,CAACI,cAAc,GAAGD,QAAQ;MAClC,CAAC,EACAL,KAAK,IAAI;QACRhB,OAAO,CAACgB,KAAK,CAAC,sCAAsCE,MAAM,CAACE,QAAQ,EAAE,EAAEJ,KAAK,CAAC;MAC/E,CAAC,CACF;IACH,CAAC,CAAC;IAEF;IACA,IAAI,CAACd,eAAe,GAAG,IAAI,CAACC,aAAa,CAAC,IAAI,CAACN,UAAU,CAAC;EAC5D;EAEAM,aAAa,CAACoB,QAAgB;IAC5BA,QAAQ,GAAGA,QAAQ,CAACC,iBAAiB,EAAE;IACvC,OAAO,IAAI,CAAChB,OAAO,CAACiB,MAAM,CAAEP,MAAc,IACxCA,MAAM,CAACQ,WAAW,CAACF,iBAAiB,EAAE,CAACG,QAAQ,CAACJ,QAAQ,CAAC,CAC1D;EACH;EAEA;EACAK,oBAAoB;IAClB,IAAI,CAACrB,OAAO,CAACsB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACxC;EAEA;EACAC,cAAc;IACZ,IAAI,CAACvB,OAAO,CAACsB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EAClC;EAEAE,QAAQ;IACN/B,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,IAAI,CAACQ,UAAU,EAAE;EACnB;EAEA;EACAuB,MAAM,CAACd,MAAc;IACnB,IAAI,CAACb,cAAc,CAAC4B,YAAY,CAACf,MAAM,CAAC,CAACP,SAAS,CAChD,MAAK;MACHX,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACQ,UAAU,EAAE;IACnB,CAAC,EACAO,KAAK,IAAI;MACRhB,OAAO,CAACgB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CACF;EACH;EAEA;EACAkB,MAAM,CAACd,QAAgB;IACrB,IAAI,CAACf,cAAc,CAAC8B,YAAY,CAACf,QAAQ,CAAC,CAACT,SAAS,CAClD,MAAK;MACHX,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACQ,UAAU,EAAE;IACnB,CAAC,EACAO,KAAK,IAAI;MACRhB,OAAO,CAACgB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CACF;EACH;CACD;AAtGYpB,gBAAgB,eAN5BD,SAAS,CAAC;EACTyC,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B,EAAE,4BAA4B;CACrE,CAAC,GAEW1C,gBAAgB,CAsG5B;SAtGYA,gBAAgB","names":["Component","ThreadsComponent","listFilter","_listFilter","value","console","log","filteredThreads","performFilter","constructor","_threadService","_http","_router","threads","getThreads","getThreadsByRecent","subscribe","data","JSON","stringify","loadCommentsForThreads","error","forEach","thread","getCommentsForThread","threadId","comments","threadComments","filterBy","toLocaleLowerCase","filter","threadTitle","includes","navigateToThreadform","navigate","navigateToHome","ngOnInit","update","updateThread","delete","deleteThread","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\threads.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Thread } from './threads';\r\nimport { ThreadService } from \"./threads.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-thread-component',\r\n  templateUrl: './threads.component.html',\r\n  styleUrls: ['../../css/IndexStyle.css', '../../css/thread_table.css']\r\n})\r\n\r\nexport class ThreadsComponent implements OnInit {\r\n  viewTitle: string = 'Table';\r\n  threads: Thread[] = [];\r\n  private _listFilter: string = '';\r\n\r\n  get listFilter(): string {\r\n    return this._listFilter;\r\n  }\r\n\r\n\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    console.log('In setter:', value);\r\n    this.filteredThreads = this.performFilter(value);\r\n  }\r\n\r\n  filteredThreads: Thread[] = this.threads;\r\n\r\n  constructor(\r\n    private _threadService: ThreadService,\r\n    public _http: HttpClient,\r\n    private _router: Router\r\n  ) { }\r\n\r\n  // function for retrieving  threads\r\n  getThreads(): void {\r\n    this._threadService.getThreadsByRecent() // Use a method that retrieves threads sorted by date\r\n      .subscribe(data => {\r\n        console.log('All', JSON.stringify(data));\r\n        this.threads = data;\r\n        this.loadCommentsForThreads(); // Load comments for the threads\r\n      },\r\n        (error) => {\r\n          console.error('Error getting threads', error);\r\n          console.error('An error occurred while fetching threads. Please try again later.');\r\n        });\r\n  }\r\n\r\n  // function for loading comments belonging to a thread by threadId\r\n  private loadCommentsForThreads() {\r\n    this.threads.forEach((thread) => {\r\n      this._threadService.getCommentsForThread(thread.threadId).subscribe(\r\n        (comments) => {\r\n          thread.threadComments = comments;\r\n        },\r\n        (error) => {\r\n          console.error(`Error fetching comments for thread ${thread.threadId}`, error);\r\n        }\r\n      );\r\n    });\r\n\r\n    // Update filteredThreads after loading comments\r\n    this.filteredThreads = this.performFilter(this.listFilter);\r\n  }\r\n\r\n  performFilter(filterBy: string): Thread[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.threads.filter((thread: Thread) =>\r\n      thread.threadTitle.toLocaleLowerCase().includes(filterBy)\r\n    );\r\n  }\r\n\r\n  // navigates to the thread from when creating a new thread\r\n  navigateToThreadform() {\r\n    this._router.navigate(['/threadForm']);\r\n  }\r\n\r\n  // changes grid view for how the threads in the index\r\n  navigateToHome() {\r\n    this._router.navigate(['/home']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('ThreadsComponent created');\r\n    this.getThreads();\r\n  }\r\n\r\n  // updates the thread\r\n  update(thread: Thread): void {\r\n    this._threadService.updateThread(thread).subscribe(\r\n      () => {\r\n        console.log('Thread updated');\r\n        this.getThreads();\r\n      },\r\n      (error) => {\r\n        console.error('Error updating thread', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // deletes the thread by threadId\r\n  delete(threadId: number): void {\r\n    this._threadService.deleteThread(threadId).subscribe(\r\n      () => {\r\n        console.log('Thread deleted');\r\n        this.getThreads();\r\n      },\r\n      (error) => {\r\n        console.error('Error deleting thread', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
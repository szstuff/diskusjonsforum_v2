{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log('In setter:', value);\n    this.filteredThreads = this.performFilter(value);\n  }\n  constructor(threadService, _http, _router) {\n    this.threadService = threadService;\n    this._http = _http;\n    this._router = _router;\n    this.viewTitle = 'Table';\n    this.threads = [];\n    this.isDropdownOpen = false;\n    this._listFilter = '';\n    this.filteredThreads = this.threads;\n  }\n  ngOnInit() {\n    this.loadThreads();\n  }\n  navigateToThreadform() {\n    this._router.navigate(['/threadForm']);\n  }\n  navigateToThreads() {\n    this._router.navigate(['/threads']);\n  }\n  loadThreads() {\n    this.threadService.getThreadsByRecent().subscribe(threads => {\n      this.threads = threads;\n      this.loadCommentsForThreads(); // Load comments for the threads\n    }, error => {\n      console.error('Error fetching threads by recent', error);\n    });\n  }\n  // filters the threads by recently posted\n  filterBy(option) {\n    // Implement your filtering logic here\n    if (option === 'recent') {\n      this.loadThreadsByRecent();\n    } else if (option === 'comments') {\n      this.loadThreadsByComments();\n    }\n  }\n  loadThreadsByRecent() {\n    this.threadService.getThreadsByRecent().subscribe(threads => {\n      this.threads = threads;\n      this.loadCommentsForThreads(); // Load comments for the filtered threads\n    }, error => {\n      console.error('Error fetching threads by recent', error);\n    });\n  }\n  // filters the threads by most comments\n  loadThreadsByComments() {\n    this.threadService.getThreadsByComments().subscribe(threads => {\n      this.threads = threads;\n      this.loadCommentsForThreads(); // Load comments for the filtered threads\n    }, error => {\n      console.error('Error fetching threads by comments', error);\n    });\n  }\n  // LastEditedAt value is only displayed when time difference is over 1s (60*1000ms)\n  significantTimeDifference(thread) {\n    const timeDiff = new Date(thread.threadLastEditedAt).getTime() - new Date(thread.threadCreatedAt).getTime();\n    return timeDiff > 60 * 1000;\n  }\n  loadCommentsForThreads() {\n    // Iterate through threads and load comments for each thread\n    this.threads.forEach(thread => {\n      this.threadService.getCommentsForThread(thread.threadId).subscribe(comments => {\n        thread.threadComments = comments;\n      }, error => {\n        console.error(`Error fetching comments for thread ${thread.threadId}`, error);\n      });\n    });\n    // Update filteredThreads after loading comments\n    this.filteredThreads = this.performFilter(this.listFilter);\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.threads.filter(thread => thread.threadTitle.toLocaleLowerCase().includes(filterBy));\n  }\n  toggleDropdown() {\n    this.isDropdownOpen = !this.isDropdownOpen;\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['../../css/IndexStyle.css', '../../css/thread_table.css']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":"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","names":["Component","HomeComponent","listFilter","_listFilter","value","console","log","filteredThreads","performFilter","constructor","threadService","_http","_router","threads","ngOnInit","loadThreads","navigateToThreadform","navigate","navigateToThreads","getThreadsByRecent","subscribe","loadCommentsForThreads","error","filterBy","option","loadThreadsByRecent","loadThreadsByComments","getThreadsByComments","significantTimeDifference","thread","timeDiff","Date","threadLastEditedAt","getTime","threadCreatedAt","forEach","getCommentsForThread","threadId","comments","threadComments","toLocaleLowerCase","filter","threadTitle","includes","toggleDropdown","isDropdownOpen","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\jenny\\source\\repos\\szstuff\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ThreadService } from '../threads/threads.service';\r\nimport { Thread } from '../threads/threads';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['../../css/IndexStyle.css', '../../css/thread_table.css'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  viewTitle: string = 'Table';\r\n  threads: Thread[] = [];\r\n  isDropdownOpen: boolean = false;\r\n  private _listFilter: string = '';\r\n\r\n  get listFilter(): string {\r\n    return this._listFilter;\r\n  }\r\n\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    console.log('In setter:', value);\r\n    this.filteredThreads = this.performFilter(value);\r\n  }\r\n\r\n  filteredThreads: Thread[] = this.threads;\r\n\r\n  constructor(\r\n    private threadService: ThreadService,\r\n    private _http: HttpClient,\r\n    private _router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadThreads();\r\n  }\r\n\r\n  navigateToThreadform() {\r\n    this._router.navigate(['/threadForm']);\r\n  }\r\n\r\n  navigateToThreads() {\r\n    this._router.navigate(['/threads']);\r\n  }\r\n\r\n  loadThreads() {\r\n    this.threadService.getThreadsByRecent().subscribe(\r\n      (threads: Thread[]) => {\r\n        this.threads = threads;\r\n        this.loadCommentsForThreads(); // Load comments for the threads\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching threads by recent', error);\r\n      }\r\n    );\r\n  }\r\n  // filters the threads by recently posted\r\n  filterBy(option: string) {\r\n    // Implement your filtering logic here\r\n    if (option === 'recent') {\r\n      this.loadThreadsByRecent();\r\n    } else if (option === 'comments') {\r\n      this.loadThreadsByComments();\r\n    }\r\n  }\r\n  loadThreadsByRecent() {\r\n    this.threadService.getThreadsByRecent().subscribe(\r\n      (threads: Thread[]) => {\r\n        this.threads = threads;\r\n        this.loadCommentsForThreads(); // Load comments for the filtered threads\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching threads by recent', error);\r\n      }\r\n    );\r\n  }\r\n  // filters the threads by most comments\r\n  loadThreadsByComments() {\r\n    this.threadService.getThreadsByComments().subscribe(\r\n      (threads: Thread[]) => {\r\n        this.threads = threads;\r\n        this.loadCommentsForThreads(); // Load comments for the filtered threads\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching threads by comments', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // LastEditedAt value is only displayed when time difference is over 1s (60*1000ms)\r\n  significantTimeDifference(thread: Thread): boolean {\r\n     const timeDiff = new Date(thread.threadLastEditedAt).getTime() - new Date(thread.threadCreatedAt).getTime();\r\n    return timeDiff > (60*1000)\r\n\r\n  }\r\n\r\n  private loadCommentsForThreads() {\r\n    // Iterate through threads and load comments for each thread\r\n    this.threads.forEach((thread) => {\r\n      this.threadService.getCommentsForThread(thread.threadId).subscribe(\r\n        (comments) => {\r\n          thread.threadComments = comments;\r\n        },\r\n        (error) => {\r\n          console.error(`Error fetching comments for thread ${thread.threadId}`, error);\r\n        }\r\n      );\r\n    });\r\n\r\n    // Update filteredThreads after loading comments\r\n    this.filteredThreads = this.performFilter(this.listFilter);\r\n  }\r\n\r\n  performFilter(filterBy: string): Thread[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.threads.filter((thread: Thread) =>\r\n      thread.threadTitle.toLocaleLowerCase().includes(filterBy)\r\n    );\r\n  }\r\n\r\n  toggleDropdown() {\r\n    this.isDropdownOpen = !this.isDropdownOpen;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./comments.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction CommentsComponent_div_3_div_1_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last edited: \", i0.ɵɵpipeBind2(3, 1, ctx_r7.thread.threadLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nconst _c0 = function () {\n  return [\"/threads\"];\n};\nfunction CommentsComponent_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"h1\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 10)(4, \"p\");\n    i0.ɵɵtext(5, \" Posted by \");\n    i0.ɵɵelementStart(6, \"b\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \" on the \");\n    i0.ɵɵelementStart(9, \"b\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \". \");\n    i0.ɵɵtemplate(13, CommentsComponent_div_3_div_1_span_13_Template, 4, 4, \"span\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"hr\");\n    i0.ɵɵelementStart(15, \"p\", 12);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\")(18, \"p\", 13);\n    i0.ɵɵelement(19, \"img\", 14);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_div_3_div_1_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.toggleEdit());\n    });\n    i0.ɵɵtext(22, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_div_3_div_1_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.deletePost(ctx_r10.thread));\n    });\n    i0.ɵɵtext(24, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.thread.threadTitle);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r4.thread.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 7, ctx_r4.thread.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.thread.threadCreatedAt !== ctx_r4.thread.threadLastEditedAt);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r4.thread.threadBody);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.thread.threadComments == null ? null : ctx_r4.thread.threadComments.length, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(10, _c0));\n  }\n}\nfunction CommentsComponent_div_3_ng_template_2_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Last edited: \", i0.ɵɵpipeBind2(3, 1, ctx_r11.thread.threadLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nconst _c1 = function (a1) {\n  return [\"/thread-view/\", a1];\n};\nfunction CommentsComponent_div_3_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function CommentsComponent_div_3_ng_template_2_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.editedTitle = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"div\", 10)(2, \"p\");\n    i0.ɵɵtext(3, \" Posted by \");\n    i0.ɵɵelementStart(4, \"b\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" on the \");\n    i0.ɵɵelementStart(7, \"b\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \". \");\n    i0.ɵɵtemplate(11, CommentsComponent_div_3_ng_template_2_span_11_Template, 4, 4, \"span\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"hr\");\n    i0.ɵɵelementStart(13, \"textarea\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function CommentsComponent_div_3_ng_template_2_Template_textarea_ngModelChange_13_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.editedContent = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\")(15, \"p\", 13);\n    i0.ɵɵelement(16, \"img\", 14);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_div_3_ng_template_2_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.saveChanges());\n    });\n    i0.ɵɵtext(19, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_div_3_ng_template_2_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.cancelEdit());\n    });\n    i0.ɵɵtext(21, \"Cancel\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r6.editedTitle);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r6.thread.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 7, ctx_r6.thread.threadCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.thread.threadCreatedAt !== ctx_r6.thread.threadLastEditedAt);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r6.editedContent);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.thread.threadComments == null ? null : ctx_r6.thread.threadComments.length, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(10, _c1, ctx_r6.thread.threadId));\n  }\n}\nfunction CommentsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, CommentsComponent_div_3_div_1_Template, 25, 11, \"div\", 6);\n    i0.ɵɵtemplate(2, CommentsComponent_div_3_ng_template_2_Template, 22, 12, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r5 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isEditing)(\"ngIfElse\", _r5);\n  }\n}\nfunction CommentsComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"p\");\n    i0.ɵɵtext(2, \"The requested thread was not found.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CommentsComponent_div_6_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"No comments yet.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CommentsComponent_div_6_div_11_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"i\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const comment_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\". Last edited at: \", i0.ɵɵpipeBind2(3, 1, comment_r19.commentLastEditedAt, \"yyyy-MM-dd HH:mm\"), \"\");\n  }\n}\nfunction CommentsComponent_div_6_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" replied on the \");\n    i0.ɵɵelementStart(5, \"b\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, CommentsComponent_div_6_div_11_ng_container_8_Template, 4, 4, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\")(12, \"button\", 28);\n    i0.ɵɵtext(13, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_div_6_div_11_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const comment_r19 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.deleteComment(comment_r19));\n    });\n    i0.ɵɵtext(15, \"Delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(16, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const comment_r19 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(comment_r19.createdBy);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 4, comment_r19.commentCreatedAt, \"yyyy-MM-dd HH:mm\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", comment_r19.commentLastEditedAt !== comment_r19.commentCreatedAt);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r19.commentBody);\n  }\n}\nfunction CommentsComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"h3\", 21);\n    i0.ɵɵtext(2, \"Comments\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 22)(4, \"input\", 23);\n    i0.ɵɵlistener(\"ngModelChange\", function CommentsComponent_div_6_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.newCommentCreatedBy = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"textarea\", 24);\n    i0.ɵɵlistener(\"ngModelChange\", function CommentsComponent_div_6_Template_textarea_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.newCommentBody = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\")(7, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function CommentsComponent_div_6_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.addComment());\n    });\n    i0.ɵɵtext(8, \"Add Comment\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"div\", 26);\n    i0.ɵɵtemplate(10, CommentsComponent_div_6_div_10_Template, 3, 0, \"div\", 11);\n    i0.ɵɵtemplate(11, CommentsComponent_div_6_div_11_Template, 17, 7, \"div\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newCommentCreatedBy);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newCommentBody);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.thread.threadComments || ctx_r3.thread.threadComments.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.thread.threadComments);\n  }\n}\nexport class CommentsComponent {\n  // initialises routes and service for the constructor\n  constructor(commentsService, _http, _router, route, _commentService) {\n    this.commentsService = commentsService;\n    this._http = _http;\n    this._router = _router;\n    this.route = route;\n    this._commentService = _commentService;\n    this.viewTitle = \"Table\";\n    this.comments = [];\n    this.isEditing = false;\n  }\n  //gets the comments using HttpClient from \"api/comments\"\n  getComments() {\n    this._http.get('api/comments').subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.comments = data;\n    }, error => {\n      console.error('Error getting comments', error);\n      // Handle the error, e.g., display an error message to the user\n      // For now, let's log a generic error message to the console\n      console.error('An error occurred while fetching comments. Please try again later.');\n    });\n  }\n  // retrieves the comments that belongs to the thread by threadId with an if statement\n  getCommentsByThread() {\n    if (this.parentThreadId !== undefined && this.parentThreadId !== null) {\n      this.commentsService.getCommentsByThreadId(this.parentThreadId).subscribe(comments => this.comments = comments, error => console.error('Error fetching comments'));\n    } else {\n      // if the parentThreadId is null or not defined the error is handled and the errormessage is logged to the console\n      console.error('Cannot fetch comments, parentThreadId is undefined.');\n    }\n  }\n  // gives the comment an commentId and sets parentThreadID to the thread it belongs to\n  navigateToCommentform(comment) {\n    const navigationExtras = {\n      queryParams: {\n        commentId: comment ? comment.commentId.toString() : undefined,\n        parentThreadId: this.parentThreadId.toString()\n      }\n    };\n    // navigates to /commentForm and specified nagivationExtras\n    this._router.navigate(['/commentForm'], navigationExtras);\n  }\n  ngOnInit() {\n    console.log('CommentsComponent created');\n    this.getComments();\n    //Routing for getCommentsByThread, fungerer ikke\n    /*\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.parentThreadId = + params.get('parentThreadId');\r\n      this.getCommentsByThread();\r\n    });\r\n    */\n  }\n  // Function to add a comment\n  addComment() {\n    // Logic to add a comment\n  }\n  // Function to edit a comment\n  editComment(commentId) {\n    // Logic to edit a comment\n  }\n  /*\r\n  cancelCommentEdit(): void{\r\n    this.editComment = this.comments.commentBody;\r\n    // reset isEditing flag\r\n    this.isEditing = false;\r\n      }\r\n  */\n  // Function to delete a comment\n  deleteComment(comment) {\n    const confirmDelete = confirm(`Are you sure you want to delete the comment`);\n    if (confirmDelete) {\n      this._commentService.deleteComment(comment.commentId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message(\"successfuly  deleted\"));\n        }\n      }, error => {\n        console.error(\"Error deleting comment\", error);\n      });\n    }\n  }\n}\nCommentsComponent.ɵfac = function CommentsComponent_Factory(t) {\n  return new (t || CommentsComponent)(i0.ɵɵdirectiveInject(i1.CommentsService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i1.CommentsService));\n};\nCommentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CommentsComponent,\n  selectors: [[\"app-comment-component\"]],\n  decls: 7,\n  vars: 3,\n  consts: [[1, \"form-box\"], [1, \"create-container\"], [1, \"form-group\"], [4, \"ngIf\", \"ngIfElse\"], [\"notFound\", \"\"], [\"id\", \"displayComments\", 4, \"ngIf\"], [\"id\", \"displayPost\", 4, \"ngIf\", \"ngIfElse\"], [\"editMode\", \"\"], [\"id\", \"displayPost\"], [1, \"thread-title-current\"], [1, \"thread-information\"], [4, \"ngIf\"], [1, \"thread-body\"], [1, \"comment-count\"], [\"src\", \"../../assets/images/message-detail-regular-24.png\", \"alt\", \"...\", \"height\", \"20\"], [1, \"editBtn\", 3, \"click\"], [1, \"editBtn\", 3, \"routerLink\", \"click\"], [\"type\", \"text\", 1, \"editTitle\", 3, \"ngModel\", \"ngModelChange\"], [1, \"editBox\", 3, \"ngModel\", \"ngModelChange\"], [1, \"container\"], [\"id\", \"displayComments\"], [1, \"comments-header\"], [\"id\", \"textBox\"], [\"placeholder\", \"Display name\", 1, \"comment-input\", 3, \"ngModel\", \"ngModelChange\"], [\"placeholder\", \"What are your thoughts?\", 1, \"comment-input\", 3, \"ngModel\", \"ngModelChange\"], [1, \"add-comment-button\", 3, \"click\"], [1, \"actual-comment\"], [4, \"ngFor\", \"ngForOf\"], [1, \"commentBtn\"], [1, \"commentBtn\", 3, \"click\"]],\n  template: function CommentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtemplate(3, CommentsComponent_div_3_Template, 4, 2, \"div\", 3);\n      i0.ɵɵtemplate(4, CommentsComponent_ng_template_4_Template, 3, 0, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(6, CommentsComponent_div_6_Template, 12, 4, \"div\", 5);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread.threadId)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.thread);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i3.RouterLink, i4.DatePipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","CommentsComponent","constructor","commentsService","_http","_router","route","_commentService","getComments","get","subscribe","data","console","log","JSON","stringify","comments","error","getCommentsByThread","parentThreadId","undefined","getCommentsByThreadId","navigateToCommentform","comment","navigationExtras","queryParams","commentId","toString","navigate","ngOnInit","addComment","editComment","deleteComment","confirmDelete","confirm","response","success","message","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\threads\\thread-view.component.html","C:\\Users\\linn2\\RiderProjects\\diskusjonsforum_v2\\diskusjonsforum_v2\\ClientApp\\src\\app\\comments\\comments.component.ts"],"sourcesContent":["<div class=\"form-box\">\r\n  <div class=\"create-container\">\r\n    <div class=\"form-group\">\r\n      <div *ngIf=\"thread.threadId; else notFound\">\r\n        <div *ngIf=\"!isEditing; else editMode\" id=\"displayPost\">\r\n          <!-- Display content when not editing -->\r\n          <h1 class=\"thread-title-current\">{{ thread.threadTitle }}</h1>\r\n\r\n          <div class=\"thread-information\">\r\n            <!-- Thread information: user, post date, last edited date -->\r\n            <p>\r\n              Posted by <b>{{ thread.createdBy }}</b> on the <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>.\r\n              <!-- Display last edited date if different -->\r\n              <span *ngIf=\"thread.threadCreatedAt !== thread.threadLastEditedAt\">\r\n                <i>Last edited: {{ thread.threadLastEditedAt | date: 'yyyy-MM-dd HH:mm' }}</i>\r\n              </span>\r\n            </p>\r\n            <hr />\r\n            <p class=\"thread-body\">{{ thread.threadBody }}</p>\r\n          </div>\r\n          <div><p class=\"comment-count\"><img src=\"../../assets/images/message-detail-regular-24.png\" alt=\"...\" height=\"20\" />\r\n            {{ thread.threadComments?.length }}</p></div>\r\n          <button (click)=\"toggleEdit()\" class=\"editBtn\">Edit</button>\r\n          <button (click)=\"deletePost(thread)\" [routerLink]=\"['/threads']\" class=\"editBtn\">Delete</button>\r\n        </div>\r\n\r\n        <ng-template #editMode>\r\n          <!-- Display editable content when editing -->\r\n          <input type=\"text\" [(ngModel)]=\"editedTitle\" class=\"editTitle\"/>\r\n          <div class=\"thread-information\">\r\n            <!-- Thread information: user, post date, last edited date -->\r\n            <p>\r\n              Posted by <b>{{ thread.createdBy }}</b> on the <b>{{ thread.threadCreatedAt | date: 'yyyy-MM-dd HH:mm' }}</b>.\r\n              <!-- Display last edited date if different -->\r\n              <span *ngIf=\"thread.threadCreatedAt !== thread.threadLastEditedAt\">\r\n                <i>Last edited: {{ thread.threadLastEditedAt | date: 'yyyy-MM-dd HH:mm' }}</i>\r\n              </span>\r\n            </p>\r\n            <hr />\r\n            <textarea [(ngModel)]=\"editedContent\" class=\"editBox\"></textarea>\r\n          </div>\r\n          <div><p class=\"comment-count\"><img src=\"../../assets/images/message-detail-regular-24.png\" alt=\"...\" height=\"20\" />\r\n            {{ thread.threadComments?.length }}</p></div>\r\n          <button (click)=\"saveChanges()\" [routerLink]=\"['/thread-view/', thread.threadId]\" class=\"editBtn\">Save</button>\r\n          <button (click)=\"cancelEdit()\" class=\"editBtn\">Cancel</button>\r\n        </ng-template>\r\n      </div>\r\n\r\n      <ng-template #notFound>\r\n        <div class=\"container\">\r\n          <p>The requested thread was not found.</p>\r\n        </div>\r\n      </ng-template>\r\n\r\n      <div id=\"displayComments\" *ngIf=\"thread\">\r\n        <h3 class=\"comments-header\">Comments</h3>\r\n\r\n        <!-- Input box for adding comments -->\r\n        <div id=\"textBox\">\r\n          <input [(ngModel)]=\"newCommentCreatedBy\" placeholder=\"Display name\" class=\"comment-input\">\r\n          <textarea [(ngModel)]=\"newCommentBody\" placeholder=\"What are your thoughts?\" class=\"comment-input\"></textarea>\r\n          <div>\r\n            <button (click)=\"addComment()\" class=\"add-comment-button\">Add Comment</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Display existing comments -->\r\n        <div class=\"actual-comment\">\r\n          <div *ngIf=\"!thread.threadComments || thread.threadComments.length === 0\">\r\n            <p>No comments yet.</p>\r\n          </div>\r\n          <div *ngFor=\"let comment of thread.threadComments\">\r\n            <p> <b>{{comment.createdBy}}</b> replied on the <b>{{comment.commentCreatedAt | date:'yyyy-MM-dd HH:mm'}}</b>\r\n              <!-- Displays commentLastEdited value only if it differs from commentCreatedAt        -->\r\n              <ng-container *ngIf=\"comment.commentLastEditedAt !== comment.commentCreatedAt\">\r\n              <i>. Last edited at: {{ comment.commentLastEditedAt | date:'yyyy-MM-dd HH:mm' }}</i>\r\n              </ng-container>\r\n            </p>\r\n            <p>{{ comment.commentBody }}</p>\r\n            <div>\r\n              <button  class=\"commentBtn\">Edit</button>\r\n              <button class=\"commentBtn\" (click)=\"deleteComment(comment)\">Delete</button>\r\n\r\n            </div>\r\n            <hr>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Comment } from './comments';\r\nimport {CommentsService} from \"./comments.service\";\r\nimport {ActivatedRoute, NavigationExtras, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-comment-component', // custom HTML tag\r\n  templateUrl: '../threads/thread-view.component.html'//path to the HTML file structure\r\n\r\n  // styleUrls: ['./comment.component.css']\r\n})\r\n\r\nexport class CommentsComponent implements OnInit {\r\n  viewTitle: string = \"Table\";\r\n  comments: Comment[] = [];\r\n  parentThreadId!: number;\r\n  isEditing = false;\r\n // initialises routes and service for the constructor\r\n  constructor(\r\n      private commentsService : CommentsService,\r\n      private _http: HttpClient,\r\n      private _router: Router,\r\n      private route: ActivatedRoute,\r\n      private _commentService: CommentsService) {}\r\n\r\n  //gets the comments using HttpClient from \"api/comments\"\r\n  getComments(): void{\r\n    this._http.get<Comment[]>('api/comments').subscribe(data => {\r\n      console.log('All', JSON.stringify(data));\r\n      this.comments = data;\r\n      },\r\n      (error) => {\r\n        console.error('Error getting comments', error);\r\n        // Handle the error, e.g., display an error message to the user\r\n        // For now, let's log a generic error message to the console\r\n        console.error('An error occurred while fetching comments. Please try again later.')\r\n    });\r\n  }\r\n  // retrieves the comments that belongs to the thread by threadId with an if statement\r\n  getCommentsByThread(): void{\r\n    if (this.parentThreadId !== undefined && this.parentThreadId !== null) {\r\n      this.commentsService.getCommentsByThreadId(this.parentThreadId).subscribe(\r\n        (comments) => (this.comments = comments),\r\n        (error) => console.error('Error fetching comments')\r\n      )\r\n    } else {\r\n      // if the parentThreadId is null or not defined the error is handled and the errormessage is logged to the console\r\n      console.error('Cannot fetch comments, parentThreadId is undefined.')\r\n    }\r\n  }\r\n  // gives the comment an commentId and sets parentThreadID to the thread it belongs to\r\n  navigateToCommentform(comment?: Comment) {\r\n    const navigationExtras: NavigationExtras = {\r\n      queryParams: {\r\n        commentId: comment ? comment.commentId.toString() : undefined,\r\n        parentThreadId: this.parentThreadId.toString()\r\n      }\r\n    };\r\n    // navigates to /commentForm and specified nagivationExtras\r\n    this._router.navigate(['/commentForm'], navigationExtras);\r\n  }\r\n  ngOnInit(): void {\r\n    console.log('CommentsComponent created');\r\n    this.getComments();\r\n\r\n    //Routing for getCommentsByThread, fungerer ikke\r\n    /*\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.parentThreadId = + params.get('parentThreadId');\r\n      this.getCommentsByThread();\r\n    });\r\n    */\r\n\r\n\r\n  }\r\n\r\n  // Function to add a comment\r\n  addComment() {\r\n    // Logic to add a comment\r\n  }\r\n\r\n  // Function to edit a comment\r\n  editComment(commentId: number) {\r\n    // Logic to edit a comment\r\n  }\r\n  /*\r\n  cancelCommentEdit(): void{\r\n    this.editComment = this.comments.commentBody;\r\n    // reset isEditing flag\r\n    this.isEditing = false;\r\n\r\n  }\r\n  */\r\n\r\n  // Function to delete a comment\r\n\r\n   deleteComment(comment: Comment){\r\n     const confirmDelete = confirm(`Are you sure you want to delete the comment`);\r\n     if(confirmDelete){\r\n       this._commentService.deleteComment(comment.commentId).subscribe(\r\n         (response)=> {\r\n           if (response.success){\r\n             console.log(response.message(\"successfuly  deleted\"))\r\n           }\r\n         },\r\n         error => {\r\n           console.error(\"Error deleting comment\", error)\r\n         }\r\n       )\r\n     }\r\n\r\n   }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}